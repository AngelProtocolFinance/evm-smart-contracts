/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DonationMatchEmitter,
  DonationMatchEmitterInterface,
} from "../../../../contracts/normalized_endowment/donation-match/DonationMatchEmitter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "donationMatch",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "accountsContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "donor",
        type: "address",
      },
    ],
    name: "DonationMatchExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "donationMatch",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "reserveToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "uniswapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "usdcAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "poolFee",
            type: "uint24",
          },
        ],
        indexed: false,
        internalType: "struct DonationMatchStorage.Config",
        name: "config",
        type: "tuple",
      },
    ],
    name: "DonationMatchInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Erc20ApprovalGiven",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Erc20Burned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Erc20Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnErC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "curAccountsContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "donor",
        type: "address",
      },
    ],
    name: "executeDonorMatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "giveApprovalErC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "curAccountscontract",
        type: "address",
      },
    ],
    name: "initDonationMatchEmiiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "donationMatch",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "reserveToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "uniswapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "usdcAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "poolFee",
            type: "uint24",
          },
        ],
        internalType: "struct DonationMatchStorage.Config",
        name: "config",
        type: "tuple",
      },
    ],
    name: "initializeDonationMatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isDonationMatch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endowmentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferErC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100205760ff196000541660005561062790816100268239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081633adaa5ae146103e4575080633de6d30e1461036e5780633f595a8a146103395780635ec1bbd2146102fd57806372b696ca146102795780637d5d95a8146101d957637d691d3e1461007057600080fd5b346101d55760e03660031901126101d55761008961052b565b9060a03660431901126101d157825160a0810181811067ffffffffffffffff8211176101a55784526100b9610541565b8152606435906001600160a01b0380831683036101a157602082019283526100df610557565b9186810192835260a43590828216820361019d576060810191825260c435938962ffffff968787168703610199578a86858196947f3d4d4fb92a75ba512dd2523d8c40b034a187c13ab3feccb3265fdefa6fd1ba599e8360e09f60808299019d8e5261015282855460081c1633146105a6565b1691828152600160205220600160ff1982541617905583519c358d5260208d01525116908a01525116606088015251166080860152511660a0840152511660c0820152a180f35b5080fd5b8880fd5b8680fd5b6024866041857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8380fd5b8280fd5b5050346101995760a03660031901126101995760c07fe16655a702814019c5d7706692dbf1df02a26521e509213eb18af11a36c4dee691610218610510565b90610221610541565b9161022a610557565b90338752600160205261024260ff84892054166105a6565b8251933385526001600160a01b03938480931660208701526024359086015216606084015260643560808401521660a0820152a180f35b505034610199576102f77f1d861f14f5f6701699cda19ddada77d9f6804495e40a9822569b845c359c8d22916102ae3661056d565b9194929333885260016020526102c960ff828a2054166105a6565b51948594859094939291606092608083019683526001600160a01b0380921660208401521660408201520152565b0390a180f35b5050346101995760203660031901126101995760ff816020936001600160a01b03610326610510565b1681526001855220541690519015158152f35b505034610199576102f77f3676b561fc3c7f77d2c549de4da884250354ea1a35c74df94852dd4fa457ac16916102ae3661056d565b5090346101d55760603660031901126101d5577f4c72cdd303d97a6d3a90e4f8b2b9b11ddddeb599a332db70ae5891b781e5c8f6916060916001600160a01b036103b661052b565b33875260016020526103cd60ff84892054166105a6565b82519335845216602083015260443590820152a180f35b84929150346101d55760203660031901126101d557610401610510565b906001600160a01b038216156104a9575082549160ff83166104665750907fffffffffffffffffffffff00000000000000000000000000000000000000000074ffffffffffffffffffffffffffffffffffffffff0060019360081b1691161717815580f35b606490602086519162461bcd60e51b8352820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152fd5b8060208462461bcd60e51b60849452820152602160248201527f496e76616c6964206163636f756e747320636f6e74726163742061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fd5b600435906001600160a01b038216820361052657565b600080fd5b602435906001600160a01b038216820361052657565b604435906001600160a01b038216820361052657565b608435906001600160a01b038216820361052657565b608090600319011261052657600435906001600160a01b0390602435828116810361052657916044359081168103610526579060643590565b156105ad57565b606460405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152fdfea2646970667358221220e65d0a31c270a291fd85278dcee88d38ae5e9503552999aa490f30ab8ea6ccd964736f6c63430008120033";

type DonationMatchEmitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DonationMatchEmitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DonationMatchEmitter__factory extends ContractFactory {
  constructor(...args: DonationMatchEmitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DonationMatchEmitter> {
    return super.deploy(overrides || {}) as Promise<DonationMatchEmitter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DonationMatchEmitter {
    return super.attach(address) as DonationMatchEmitter;
  }
  override connect(signer: Signer): DonationMatchEmitter__factory {
    return super.connect(signer) as DonationMatchEmitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DonationMatchEmitterInterface {
    return new utils.Interface(_abi) as DonationMatchEmitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DonationMatchEmitter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DonationMatchEmitter;
  }
}
