/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DummyCRVLP,
  DummyCRVLPInterface,
} from "../../../../../contracts/integrations/goldfinch/test/DummyCRVLP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
      {
        internalType: "uint256",
        name: "min_mint_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "use_eth",
        type: "bool",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "add_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "arg0",
        type: "uint256",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
    ],
    name: "calc_token_amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "coins",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "get_dy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lp_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256[2]",
        name: "min_amounts",
        type: "uint256[2]",
      },
    ],
    name: "remove_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "token_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "min_amount",
        type: "uint256",
      },
    ],
    name: "remove_liquidity_one_coin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dy_for_get_dy",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dy_for_exchange",
        type: "uint256",
      },
    ],
    name: "setDys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461008d57601f61059f38819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d57610052602061004b836100a8565b92016100a8565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556040516104e290816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361008d5756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826332a8d01a146104065782634903b0d1146103ec5750816354f0f7d5146103d1578163556d6e9f146103b35781635b36389c1461038f5781635b41b90814610154575080637328333b146101145780638d8ea727146100f2578063c6610657146100d7578063f1dc3cc9146100bb5763fc0c546a1461009e57600080fd5b346100b757816003193601126100b75751908152602090f35b5080fd5b50346100b757906020916100ce36610424565b50505051908152f35b50346100b75760203660031901126100b75751908152602090f35b50346100b757806003193601126100b757366044116100b75751908152602090f35b50346100b75760a03660031901126100b757366044116100b757606435801515036100b7576084356001600160a01b038116036100b75751908152602090f35b90503461038b57608036600319011261038b576044358135610294576101c1916001600160a01b0390816002541692855180946323b872dd60e01b82528189816020998a9630338a85016040919493929460608201956001600160a01b0380921683521660208201520152565b03925af191821561028a5761021293859361026d575b50600354166001549187875180968195829463a9059cbb60e01b845233908401602090939291936001600160a01b0360408201951681520152565b03925af180156102605760209450610232575b50505b6001549051908152f35b8161025192903d10610259575b6102498183610443565b810190610494565b503880610225565b503d61023f565b50505051903d90823e3d90fd5b61028390843d8611610259576102498183610443565b50386101d7565b85513d88823e3d90fd5b6102e5916001600160a01b0390816003541692855180946323b872dd60e01b82528189816020998a9630338a85016040919493929460608201956001600160a01b0380921683521660208201520152565b03925af191821561028a5761033693859361036e575b50600254166001549187875180968195829463a9059cbb60e01b845233908401602090939291936001600160a01b0360408201951681520152565b03925af180156102605760209450610350575b5050610228565b8161036692903d10610259576102498183610443565b503880610349565b61038490843d8611610259576102498183610443565b50386102fb565b8280fd5b5050346100b75760603660031901126100b757366064116100b75751908152602090f35b5050346100b7576020916103c636610424565b505050549051908152f35b5050346100b757816003193601126100b75751908152602090f35b8490346100b75760203660031901126100b7576020918152f35b8482853461038b573660031901126100b75735815560243560015580f35b606090600319011261043e57600435906024359060443590565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761046557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9081602091031261043e5751801515810361043e579056fea2646970667358221220fd898124da98d6bc5fcb1b03f567ca83eb4e3ef03208dae1224ea34cf27e0fc864736f6c63430008120033";

type DummyCRVLPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyCRVLPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyCRVLP__factory extends ContractFactory {
  constructor(...args: DummyCRVLPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyCRVLP> {
    return super.deploy(
      _token0,
      _token1,
      overrides || {}
    ) as Promise<DummyCRVLP>;
  }
  override getDeployTransaction(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token0, _token1, overrides || {});
  }
  override attach(address: string): DummyCRVLP {
    return super.attach(address) as DummyCRVLP;
  }
  override connect(signer: Signer): DummyCRVLP__factory {
    return super.connect(signer) as DummyCRVLP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyCRVLPInterface {
    return new utils.Interface(_abi) as DummyCRVLPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyCRVLP {
    return new Contract(address, _abi, signerOrProvider) as DummyCRVLP;
  }
}
