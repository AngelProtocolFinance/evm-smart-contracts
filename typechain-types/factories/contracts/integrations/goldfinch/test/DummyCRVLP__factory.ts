/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DummyCRVLP,
  DummyCRVLPInterface,
} from "../../../../../contracts/integrations/goldfinch/test/DummyCRVLP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
      {
        internalType: "uint256",
        name: "min_mint_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "use_eth",
        type: "bool",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "add_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "arg0",
        type: "uint256",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
    ],
    name: "calc_token_amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "coins",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "get_dy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lp_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256[2]",
        name: "min_amounts",
        type: "uint256[2]",
      },
    ],
    name: "remove_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "token_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "min_amount",
        type: "uint256",
      },
    ],
    name: "remove_liquidity_one_coin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dy_for_get_dy",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dy_for_exchange",
        type: "uint256",
      },
    ],
    name: "setDys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161062a38038061062a83398101604081905261002f9161007c565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61056c806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635b41b908116100715780635b41b908146101255780637328333b146101385780638d8ea72714610150578063c66106571461015e578063f1dc3cc914610184578063fc0c546a1461019b57600080fd5b806332a8d01a146100ae5780634903b0d1146100c957806354f0f7d5146100f0578063556d6e9f146100f75780635b36389c1461010f575b600080fd5b6100c76100bc3660046103aa565b600091909155600155565b005b6100dd6100d73660046103cc565b50600090565b6040519081526020015b60405180910390f35b60006100dd565b6100dd6101053660046103e5565b6000549392505050565b6100dd61011d366004610428565b600092915050565b6100dd610133366004610455565b6101a2565b6100dd610146366004610498565b6000949350505050565b6100dd6100d73660046104f6565b61016c6100d73660046103cc565b6040516001600160a01b0390911681526020016100e7565b6100dd6101923660046103e5565b60009392505050565b600061016c565b6000846000036102a7576002546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190610519565b5060035460015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190610519565b5061039e565b6003546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610519565b5060025460015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190610519565b505b50600154949350505050565b600080604083850312156103bd57600080fd5b50508035926020909101359150565b6000602082840312156103de57600080fd5b5035919050565b6000806000606084860312156103fa57600080fd5b505081359360208301359350604090920135919050565b806040810183101561042257600080fd5b92915050565b6000806060838503121561043b57600080fd5b8235915061044c8460208501610411565b90509250929050565b6000806000806080858703121561046b57600080fd5b5050823594602084013594506040840135936060013592509050565b801515811461049557600080fd5b50565b60008060008060a085870312156104ae57600080fd5b6104b88686610411565b93506040850135925060608501356104cf81610487565b915060808501356001600160a01b03811681146104eb57600080fd5b939692955090935050565b60006040828403121561050857600080fd5b6105128383610411565b9392505050565b60006020828403121561052b57600080fd5b81516105128161048756fea2646970667358221220c0f654097808210575c28c378e7188c828b2857e6939e7c7eb93e05788ba2db164736f6c634300080f0033";

type DummyCRVLPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyCRVLPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyCRVLP__factory extends ContractFactory {
  constructor(...args: DummyCRVLPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyCRVLP> {
    return super.deploy(
      _token0,
      _token1,
      overrides || {}
    ) as Promise<DummyCRVLP>;
  }
  override getDeployTransaction(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token0, _token1, overrides || {});
  }
  override attach(address: string): DummyCRVLP {
    return super.attach(address) as DummyCRVLP;
  }
  override connect(signer: Signer): DummyCRVLP__factory {
    return super.connect(signer) as DummyCRVLP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyCRVLPInterface {
    return new utils.Interface(_abi) as DummyCRVLPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyCRVLP {
    return new Contract(address, _abi, signerOrProvider) as DummyCRVLP;
  }
}
