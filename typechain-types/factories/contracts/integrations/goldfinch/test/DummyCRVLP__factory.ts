/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DummyCRVLP,
  DummyCRVLPInterface,
} from "../../../../../contracts/integrations/goldfinch/test/DummyCRVLP";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
      {
        internalType: "uint256",
        name: "min_mint_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "use_eth",
        type: "bool",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "add_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "arg0",
        type: "uint256",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
    ],
    name: "calc_token_amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "coins",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "get_dy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lp_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256[2]",
        name: "min_amounts",
        type: "uint256[2]",
      },
    ],
    name: "remove_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "token_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "min_amount",
        type: "uint256",
      },
    ],
    name: "remove_liquidity_one_coin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dy_for_get_dy",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dy_for_exchange",
        type: "uint256",
      },
    ],
    name: "setDys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610341806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635b41b908116100715780635b41b908146101255780637328333b1461013e5780638d8ea72714610156578063c661065714610164578063f1dc3cc91461018a578063fc0c546a146101a157600080fd5b806332a8d01a146100ae5780634903b0d1146100c957806354f0f7d5146100f0578063556d6e9f146100f75780635b36389c1461010f575b600080fd5b6100c76100bc3660046101a8565b600091909155600155565b005b6100dd6100d73660046101ca565b50600090565b6040519081526020015b60405180910390f35b60006100dd565b6100dd6101053660046101e3565b6000549392505050565b6100dd61011d366004610226565b600092915050565b6100dd610133366004610253565b600154949350505050565b6100dd61014c366004610285565b6000949350505050565b6100dd6100d73660046102e8565b6101726100d73660046101ca565b6040516001600160a01b0390911681526020016100e7565b6100dd6101983660046101e3565b60009392505050565b6000610172565b600080604083850312156101bb57600080fd5b50508035926020909101359150565b6000602082840312156101dc57600080fd5b5035919050565b6000806000606084860312156101f857600080fd5b505081359360208301359350604090920135919050565b806040810183101561022057600080fd5b92915050565b6000806060838503121561023957600080fd5b8235915061024a846020850161020f565b90509250929050565b6000806000806080858703121561026957600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060a0858703121561029b57600080fd5b6102a5868661020f565b935060408501359250606085013580151581146102c157600080fd5b915060808501356001600160a01b03811681146102dd57600080fd5b939692955090935050565b6000604082840312156102fa57600080fd5b610304838361020f565b939250505056fea264697066735822122066b82d22552ee9260032ea2338cb40905546feb3598e658f5e297b5b6d27e81264736f6c634300080f0033";

type DummyCRVLPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyCRVLPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyCRVLP__factory extends ContractFactory {
  constructor(...args: DummyCRVLPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyCRVLP> {
    return super.deploy(overrides || {}) as Promise<DummyCRVLP>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DummyCRVLP {
    return super.attach(address) as DummyCRVLP;
  }
  override connect(signer: Signer): DummyCRVLP__factory {
    return super.connect(signer) as DummyCRVLP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyCRVLPInterface {
    return new utils.Interface(_abi) as DummyCRVLPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyCRVLP {
    return new Contract(address, _abi, signerOrProvider) as DummyCRVLP;
  }
}
