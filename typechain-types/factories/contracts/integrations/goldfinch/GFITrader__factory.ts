/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  GFITrader,
  GFITraderInterface,
} from "../../../../contracts/integrations/goldfinch/GFITrader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouterAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gfi",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth9",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GFI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
    ],
    name: "swapExactInputMultihop",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108e93803806108e9833981810160405281019061003291906101a1565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610208565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016e82610143565b9050919050565b61017e81610163565b811461018957600080fd5b50565b60008151905061019b81610175565b92915050565b600080600080608085870312156101bb576101ba61013e565b5b60006101c98782880161018c565b94505060206101da8782880161018c565b93505060406101eb8782880161018c565b92505060606101fc8782880161018c565b91505092959194509250565b6106d2806102176000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063034afe7b1461005c57806304bd895b1461007a578063089fe6aa146100aa5780634aa4a4fc146100c857806389a30271146100e6575b600080fd5b610064610104565b6040516100719190610335565b60405180910390f35b610094600480360381019061008f919061038b565b61012a565b6040516100a191906103da565b60405180910390f35b6100b26102a2565b6040516100bf9190610413565b60405180910390f35b6100d06102a8565b6040516100dd9190610335565b60405180910390f35b6100ee6102ce565b6040516100fb9190610335565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806040518060a00160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610bb8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610bb8600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016101bb9594939291906104ac565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200185815260200184815250905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b81526004016102569190610638565b6020604051808303816000875af1158015610275573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610299919061066f565b91505092915050565b610bb881565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061031f826102f4565b9050919050565b61032f81610314565b82525050565b600060208201905061034a6000830184610326565b92915050565b600080fd5b6000819050919050565b61036881610355565b811461037357600080fd5b50565b6000813590506103858161035f565b92915050565b600080604083850312156103a2576103a1610350565b5b60006103b085828601610376565b92505060206103c185828601610376565b9150509250929050565b6103d481610355565b82525050565b60006020820190506103ef60008301846103cb565b92915050565b600062ffffff82169050919050565b61040d816103f5565b82525050565b60006020820190506104286000830184610404565b92915050565b60008160601b9050919050565b60006104468261042e565b9050919050565b60006104588261043b565b9050919050565b61047061046b82610314565b61044d565b82525050565b60008160e81b9050919050565b600061048e82610476565b9050919050565b6104a66104a1826103f5565b610483565b82525050565b60006104b8828861045f565b6014820191506104c88287610495565b6003820191506104d8828661045f565b6014820191506104e88285610495565b6003820191506104f8828461045f565b6014820191508190509695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561054557808201518184015260208101905061052a565b83811115610554576000848401525b50505050565b6000601f19601f8301169050919050565b60006105768261050b565b6105808185610516565b9350610590818560208601610527565b6105998161055a565b840191505092915050565b6105ad81610314565b82525050565b6105bc81610355565b82525050565b600060a08301600083015184820360008601526105df828261056b565b91505060208301516105f460208601826105a4565b50604083015161060760408601826105b3565b50606083015161061a60608601826105b3565b50608083015161062d60808601826105b3565b508091505092915050565b6000602082019050818103600083015261065281846105c2565b905092915050565b6000815190506106698161035f565b92915050565b60006020828403121561068557610684610350565b5b60006106938482850161065a565b9150509291505056fea2646970667358221220aa6acad0bc54ebfecc244841fb402eb4e9569affc589df93e15c58bedfa5f65864736f6c634300080f0033";

type GFITraderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GFITraderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GFITrader__factory extends ContractFactory {
  constructor(...args: GFITraderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _swapRouterAddr: PromiseOrValue<string>,
    _gfi: PromiseOrValue<string>,
    _weth9: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GFITrader> {
    return super.deploy(
      _swapRouterAddr,
      _gfi,
      _weth9,
      _usdc,
      overrides || {}
    ) as Promise<GFITrader>;
  }
  override getDeployTransaction(
    _swapRouterAddr: PromiseOrValue<string>,
    _gfi: PromiseOrValue<string>,
    _weth9: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _swapRouterAddr,
      _gfi,
      _weth9,
      _usdc,
      overrides || {}
    );
  }
  override attach(address: string): GFITrader {
    return super.attach(address) as GFITrader;
  }
  override connect(signer: Signer): GFITrader__factory {
    return super.connect(signer) as GFITrader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GFITraderInterface {
    return new utils.Interface(_abi) as GFITraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GFITrader {
    return new Contract(address, _abi, signerOrProvider) as GFITrader;
  }
}
