/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AxelarExecutable,
  AxelarExecutableInterface,
} from "../../../contracts/axelar/AxelarExecutable";

const _abi = [
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576104b2908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163116191b614610329575080631a98b2e0146101d45763491606581461004457600080fd5b346101d057826003196080368201126101c45767ffffffffffffffff906024358281116101cc57610078903690860161035c565b6044929192358481116101c857610092903690880161035c565b9590926064359586116101c4576101279661013689926100c16100ba60209a3690870161035c565b36916103fc565b8981519101209273ffffffffffffffffffffffffffffffffffffffff865460101c16978d519b8c9a8b998a987f5f6970c3000000000000000000000000000000000000000000000000000000008a528035908a0152608060248a0152608489019161045b565b9286840301604487015261045b565b90606483015203925af19081156101b7578491610189575b5015610162575061015f905161038f565b80f35b90517f500c44b4000000000000000000000000000000000000000000000000000000008152fd5b6101aa915060203d81116101b0575b6101a281836103da565b810190610443565b3861014e565b503d610198565b50505051903d90823e3d90fd5b5080fd5b8580fd5b8380fd5b8280fd5b50346101d0578260031960c0368201126101c45767ffffffffffffffff906024358281116101cc57610209903690860161035c565b6044929192358481116101c857610223903690880161035c565b9590946064358181116101d05761023d9036908a0161035c565b9690976084359283116101cc576102db986020988c976102eb6102ff956102768f9861026c9036908b0161035c565b96909536916103fc565b8d81519101209573ffffffffffffffffffffffffffffffffffffffff8a5460101c169b519e8f9d8e9c8d9b7f1876eed9000000000000000000000000000000000000000000000000000000008d528035908d015260c060248d015260c48c019161045b565b91848a84030160448b015261045b565b93606487015285840301608486015261045b565b60a43560a483015203925af19081156101b7578491610189575015610162575061015f905161038f565b8490346101c457816003193601126101c45773ffffffffffffffffffffffffffffffffffffffff6020925460101c168152f35b9181601f8401121561038a5782359167ffffffffffffffff831161038a576020838186019501011161038a57565b600080fd5b60e0810190811067ffffffffffffffff8211176103ab57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176103ab57604052565b92919267ffffffffffffffff82116103ab5760405191610426601f8201601f1916602001846103da565b82948184528183011161038a578281602093846000960137010152565b9081602091031261038a5751801515810361038a5790565b908060209392818452848401376000828201840152601f01601f191601019056fea26469706673582212201dc8eab6e2795fc14aa9896a3fab5a294031cb590bb993bf1e44f4bfd0bc8c6264736f6c63430008120033";

type AxelarExecutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxelarExecutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AxelarExecutable__factory extends ContractFactory {
  constructor(...args: AxelarExecutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AxelarExecutable> {
    return super.deploy(overrides || {}) as Promise<AxelarExecutable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AxelarExecutable {
    return super.attach(address) as AxelarExecutable;
  }
  override connect(signer: Signer): AxelarExecutable__factory {
    return super.connect(signer) as AxelarExecutable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxelarExecutableInterface {
    return new utils.Interface(_abi) as AxelarExecutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AxelarExecutable {
    return new Contract(address, _abi, signerOrProvider) as AxelarExecutable;
  }
}
