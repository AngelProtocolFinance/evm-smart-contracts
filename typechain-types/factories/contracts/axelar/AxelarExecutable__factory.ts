/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AxelarExecutable,
  AxelarExecutableInterface,
} from "../../../contracts/axelar/AxelarExecutable";

const _abi = [
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063116191b6146100465780631a98b2e0146100645780634916065814610080575b600080fd5b61004e61009c565b60405161005b9190610384565b60405180910390f35b61007e600480360381019061007991906104d0565b6100c2565b005b61009a600480360381019061009591906105e0565b6101e0565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600085856040516100d49291906106e8565b60405180910390209050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016101499998979695949392919061076e565b6020604051808303816000875af1158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c9190610822565b6101c2576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101d38a8a8a8a8a8a8a8a8a6102f2565b5050505050505050505050565b600082826040516101f29291906106e8565b60405180910390209050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b81526004016102619695949392919061084f565b6020604051808303816000875af1158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a49190610822565b6102da576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102e88787878787876102fd565b5050505050505050565b505050505050505050565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061034a61034561034084610305565b610325565b610305565b9050919050565b600061035c8261032f565b9050919050565b600061036e82610351565b9050919050565b61037e81610363565b82525050565b60006020820190506103996000830184610375565b92915050565b600080fd5b600080fd5b6000819050919050565b6103bc816103a9565b81146103c757600080fd5b50565b6000813590506103d9816103b3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610404576104036103df565b5b8235905067ffffffffffffffff811115610421576104206103e4565b5b60208301915083600182028301111561043d5761043c6103e9565b5b9250929050565b60008083601f84011261045a576104596103df565b5b8235905067ffffffffffffffff811115610477576104766103e4565b5b602083019150836001820283011115610493576104926103e9565b5b9250929050565b6000819050919050565b6104ad8161049a565b81146104b857600080fd5b50565b6000813590506104ca816104a4565b92915050565b60008060008060008060008060008060c08b8d0312156104f3576104f261039f565b5b60006105018d828e016103ca565b9a505060208b013567ffffffffffffffff811115610522576105216103a4565b5b61052e8d828e016103ee565b995099505060408b013567ffffffffffffffff811115610551576105506103a4565b5b61055d8d828e016103ee565b975097505060608b013567ffffffffffffffff8111156105805761057f6103a4565b5b61058c8d828e01610444565b955095505060808b013567ffffffffffffffff8111156105af576105ae6103a4565b5b6105bb8d828e016103ee565b935093505060a06105ce8d828e016104bb565b9150509295989b9194979a5092959850565b60008060008060008060006080888a0312156105ff576105fe61039f565b5b600061060d8a828b016103ca565b975050602088013567ffffffffffffffff81111561062e5761062d6103a4565b5b61063a8a828b016103ee565b9650965050604088013567ffffffffffffffff81111561065d5761065c6103a4565b5b6106698a828b016103ee565b9450945050606088013567ffffffffffffffff81111561068c5761068b6103a4565b5b6106988a828b01610444565b925092505092959891949750929550565b600081905092915050565b82818337600083830152505050565b60006106cf83856106a9565b93506106dc8385846106b4565b82840190509392505050565b60006106f58284866106c3565b91508190509392505050565b61070a816103a9565b82525050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b600061073e8385610710565b935061074b8385846106b4565b61075483610721565b840190509392505050565b6107688161049a565b82525050565b600060c082019050610783600083018c610701565b8181036020830152610796818a8c610732565b905081810360408301526107ab81888a610732565b90506107ba6060830187610701565b81810360808301526107cd818587610732565b90506107dc60a083018461075f565b9a9950505050505050505050565b60008115159050919050565b6107ff816107ea565b811461080a57600080fd5b50565b60008151905061081c816107f6565b92915050565b6000602082840312156108385761083761039f565b5b60006108468482850161080d565b91505092915050565b60006080820190506108646000830189610701565b8181036020830152610877818789610732565b9050818103604083015261088c818587610732565b905061089b6060830184610701565b97965050505050505056fea2646970667358221220274d8b8a564432ff54e098eef63e140da785d1db6161d0c700e48134a840e7d564736f6c634300080f0033";

type AxelarExecutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxelarExecutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AxelarExecutable__factory extends ContractFactory {
  constructor(...args: AxelarExecutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AxelarExecutable> {
    return super.deploy(overrides || {}) as Promise<AxelarExecutable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AxelarExecutable {
    return super.attach(address) as AxelarExecutable;
  }
  override connect(signer: Signer): AxelarExecutable__factory {
    return super.connect(signer) as AxelarExecutable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxelarExecutableInterface {
    return new utils.Interface(_abi) as AxelarExecutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AxelarExecutable {
    return new Contract(address, _abi, signerOrProvider) as AxelarExecutable;
  }
}
