/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AxelarExecutable,
  AxelarExecutableInterface,
} from "../../../contracts/axelar/AxelarExecutable";

const _abi = [
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610599806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063116191b6146100465780631a98b2e01461007b5780634916065814610090575b600080fd5b60005461005f906201000090046001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61008e6100893660046102e3565b6100a3565b005b61008e61009e3660046103bd565b6101a3565b600085856040516100b5929190610461565b604051908190038120600054631876eed960e01b83529092506201000090046001600160a01b031690631876eed990610102908e908e908e908e908e9089908d908d908d9060040161049a565b6020604051808303816000875af1158015610121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014591906104f9565b61016257604051631403112d60e21b815260040160405180910390fd5b50506040805160e0810182526060808252600060208301819052928201839052808201526080810182905260a0810182905260c00152505050505050505050565b600082826040516101b5929190610461565b604051908190038120600054635f6970c360e01b83529092506201000090046001600160a01b031690635f6970c3906101fc908b908b908b908b908b908990600401610522565b6020604051808303816000875af115801561021b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023f91906104f9565b61025c57604051631403112d60e21b815260040160405180910390fd5b50506040805160e0810182526060808252600060208301819052928201839052808201526080810182905260a0810182905260c00152505050505050565b60008083601f8401126102ac57600080fd5b50813567ffffffffffffffff8111156102c457600080fd5b6020830191508360208285010111156102dc57600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561030257600080fd5b8a35995060208b013567ffffffffffffffff8082111561032157600080fd5b61032d8e838f0161029a565b909b50995060408d013591508082111561034657600080fd5b6103528e838f0161029a565b909950975060608d013591508082111561036b57600080fd5b6103778e838f0161029a565b909750955060808d013591508082111561039057600080fd5b5061039d8d828e0161029a565b9150809450508092505060a08b013590509295989b9194979a5092959850565b60008060008060008060006080888a0312156103d857600080fd5b87359650602088013567ffffffffffffffff808211156103f757600080fd5b6104038b838c0161029a565b909850965060408a013591508082111561041c57600080fd5b6104288b838c0161029a565b909650945060608a013591508082111561044157600080fd5b5061044e8a828b0161029a565b989b979a50959850939692959293505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c0602082015260006104b460c083018a8c610471565b82810360408401526104c781898b610471565b905086606084015282810360808401526104e2818688610471565b9150508260a08301529a9950505050505050505050565b60006020828403121561050b57600080fd5b8151801515811461051b57600080fd5b9392505050565b86815260806020820152600061053c608083018789610471565b828103604084015261054f818688610471565b91505082606083015297965050505050505056fea2646970667358221220a233c3b2efc60b209f0bdfdcf3db8780c280733cbf8e7265b78e8f88eafd6bd564736f6c634300080f0033";

type AxelarExecutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxelarExecutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AxelarExecutable__factory extends ContractFactory {
  constructor(...args: AxelarExecutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AxelarExecutable> {
    return super.deploy(overrides || {}) as Promise<AxelarExecutable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AxelarExecutable {
    return super.attach(address) as AxelarExecutable;
  }
  override connect(signer: Signer): AxelarExecutable__factory {
    return super.connect(signer) as AxelarExecutable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxelarExecutableInterface {
    return new utils.Interface(_abi) as AxelarExecutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AxelarExecutable {
    return new Contract(address, _abi, signerOrProvider) as AxelarExecutable;
  }
}
