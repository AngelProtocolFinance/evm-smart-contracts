/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  StringArray,
  StringArrayInterface,
} from "../../../../../contracts/lib/Strings/string.sol/StringArray";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "curAddr",
        type: "address",
      },
    ],
    name: "addressToString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "s1",
        type: "string",
      },
      {
        internalType: "string",
        name: "s2",
        type: "string",
      },
    ],
    name: "stringCompare",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "arr",
        type: "string[]",
      },
      {
        internalType: "string",
        name: "searchFor",
        type: "string",
      },
    ],
    name: "stringIndexOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001c57610a0d90816100228239308160520152f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081635e57966d1461049d5750806360353db91461040457806373b64e15146103325763c8b6b0fa1461004f57600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001461032e578160031936011261032e57803592602490813585548110156102d2575b855460001981019081116100f65781101561010857600181018082116100f6576100bd908761082b565b506100c8828861082b565b6100e4576100df92916100da916108aa565b61078a565b610093565b5050508083634e487b7160e01b825252fd5b5050601183634e487b7160e01b835252fd5b50929391825480156102c0576000190191610123838561082b565b9290926102b057505080610138859254610859565b80610273575b5050509182825561014e83610772565b61015a855191826106de565b83815260209384820190819484528584209184905b8282106101d057505050508451938085019181865251809252858501958260051b8601019392955b8287106101a45785850386f35b9091929382806101c0600193603f198a820301865288516106b9565b9601920196019592919092610197565b8897949597518589928654926101e584610859565b808252600194808616908115610257575060011461021f575b5061020d8160019603826106de565b8152019401910190929694939661016f565b888d52838d2095508c905b808210610240575081018301945061020d6101fe565b8654838301860152958501958a949091019061022a565b60ff19168584015250151560051b81018301945061020d6101fe565b82601f821160011461028b575050555b82388061013e565b90918082526102a9601f60208420940160051c840160018501610893565b5555610283565b858091634e487b7160e01b825252fd5b5060318491634e487b7160e01b835252fd5b60648460198560208951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4572726f7220696e2072656d6f76653a20696e7465726e616c000000000000006044820152fd5b8280fd5b5082826003193601126103d35781359167ffffffffffffffff80841161032e573660238501121561032e57838201359261036b84610772565b93610378875195866106de565b8085526020958686016024809360051b8301019136831161040057838101915b8383106103d65750505050359182116103d357506103c392916103bd91369101610716565b906107af565b8392919251928352151590820152f35b80fd5b82358781116103fc578a916103f18392883691870101610716565b815201920191610398565b8680fd5b8480fd5b508160031936011261032e5767ffffffffffffffff81358181116104005761042f9036908401610716565b936024359182116103d3575061044791369101610716565b8151926020936104738582816104668183019687815193849201610696565b81010380845201826106de565b5190209082516104928582816104668183019687815193849201610696565b519020149051908152f35b602093929150366003190184136104005781359073ffffffffffffffffffffffffffffffffffffffff82168092036106925767ffffffffffffffff958185018781118382101761067f578552601082527f303132333435363738396162636465660000000000000000000000000000000086830152845196606088019081118882101761067f578552603387528587018536823787511561066c576030905386519160019283101561066c5760786021890153815b601481106105705786518881528061056c818b018c6106b9565b0390f35b600c810180821161065957888110156106465785901a7fff00000000000000000000000000000000000000000000000000000000000000600f816105b882858c1c16876109c6565b51169284881b9360029086860482148715171561063357858201809211610633576105ed8f91926105f59594938b1a926109c6565b5316856109c6565b51166003918201809211610620579061061561061b9392861a918c6109c6565b5361078a565b610552565b60248560118a634e487b7160e01b835252fd5b60248960118e634e487b7160e01b835252fd5b602484603289634e487b7160e01b835252fd5b602484601189634e487b7160e01b835252fd5b602482603287634e487b7160e01b835252fd5b602482604187634e487b7160e01b835252fd5b8580fd5b60005b8381106106a95750506000910152565b8181015183820152602001610699565b906020916106d281518092818552858086019101610696565b601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff82111761070057604052565b634e487b7160e01b600052604160045260246000fd5b81601f8201121561076d5780359067ffffffffffffffff8211610700576040519261074b601f8401601f1916602001856106de565b8284526020838301011161076d57816000926020809301838601378301015290565b600080fd5b67ffffffffffffffff81116107005760051b60200190565b60001981146107995760010190565b634e487b7160e01b600052601160045260246000fd5b60005b8151811015610820576020808260051b840101519060409182516107e58382816104668183019687815193849201610696565b5190209151610801828201928288516104668187858d01610696565b51902014610817576108129061078a565b6107b2565b91505090600190565b505050600090600090565b80548210156108435760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015610889575b602083101461087357565b634e487b7160e01b600052602260045260246000fd5b91607f1691610868565b81811061089e575050565b60008155600101610893565b908082146109c2576108bc8154610859565b9067ffffffffffffffff82116107005781906108d88454610859565b601f8111610985575b50600090601f83116001146109195760009261090e575b50508160011b916000199060031b1c1916179055565b0154905038806108f8565b81526020808220858352818320935090601f1985169083905b82821061096c575050908460019594939210610953575b505050811b019055565b015460001960f88460031b161c19169055388080610949565b8495819295850154815560018091019601940190610932565b6109b290856000526020600020601f850160051c810191602086106109b8575b601f0160051c0190610893565b386108e1565b90915081906109a5565b5050565b90815181101561084357016020019056fea264697066735822122058b0a433f4c9c22d44af870750a6d3c65ca9d8c5c3e24adf0f1b486ba157279f64736f6c63430008120033";

type StringArrayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StringArrayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StringArray__factory extends ContractFactory {
  constructor(...args: StringArrayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StringArray> {
    return super.deploy(overrides || {}) as Promise<StringArray>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StringArray {
    return super.attach(address) as StringArray;
  }
  override connect(signer: Signer): StringArray__factory {
    return super.connect(signer) as StringArray__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StringArrayInterface {
    return new utils.Interface(_abi) as StringArrayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StringArray {
    return new Contract(address, _abi, signerOrProvider) as StringArray;
  }
}
