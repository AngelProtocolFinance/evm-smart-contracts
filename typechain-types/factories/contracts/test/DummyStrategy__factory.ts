/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DummyStrategy,
  DummyStrategyInterface,
  IStrategy,
} from "../../../contracts/test/DummyStrategy";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "strategySelector",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "lockedVault",
            type: "address",
          },
          {
            internalType: "address",
            name: "liquidVault",
            type: "address",
          },
          {
            internalType: "address",
            name: "admin",
            type: "address",
          },
        ],
        internalType: "struct IStrategy.StrategyConfig",
        name: "_config",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getStrategyConfig",
    outputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "strategySelector",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "lockedVault",
            type: "address",
          },
          {
            internalType: "address",
            name: "liquidVault",
            type: "address",
          },
          {
            internalType: "address",
            name: "admin",
            type: "address",
          },
        ],
        internalType: "struct IStrategy.StrategyConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "previewDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "previewWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "setDummyAmt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "strategySelector",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "lockedVault",
            type: "address",
          },
          {
            internalType: "address",
            name: "liquidVault",
            type: "address",
          },
          {
            internalType: "address",
            name: "admin",
            type: "address",
          },
        ],
        internalType: "struct IStrategy.StrategyConfig",
        name: "_newConfig",
        type: "tuple",
      },
    ],
    name: "setStrategyConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461014757601f61068a38819003918201601f19168301926001600160401b039290918385118386101761014c578160c092849260409788528339810103126101475782519160c083019081118382101761014c5783528051916001600160e01b03198316830361014757808360a0925261007e60208401610162565b93846020830152610090868501610162565b9485878401526100a260608601610162565b928360608201526100c6856100b960808901610162565b9788608085015201610162565b948591015260ff196000541660005560015490640100000000600160c01b039060201b169160e01c9060018060c01b031916171760015560018060a01b03928380928160018060a01b031997168760025416176002551685600354161760035516836004541617600455169060055416176005555161051390816101778239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101475756fe60406080815260048036101561001457600080fd5b600090813560e01c9283630a28a4771461044e5783632e1a7d4d146103955783634a106b85146102aa5783635c975abb14610288578363ade84ff8146101b5578363b6b55f251461009d57508263c2bba6431461008157505063ef8b30f71461007c57600080fd5b61044e565b34610099576020366003190112610099573560065580f35b5080fd5b82602092836003193601126100995760015483516323b872dd60e01b815233838201908152306020820152833560408201526001600160a01b039287918391831c85169082908890829060600103925af180156101ab579161013a949391879361018e575b50600254600654875163a9059cbb60e01b81523394810194855260208501919091529586939290911691839186918391604090910190565b03925af19081156101835750610156575b506006549051908152f35b61017590833d851161017c575b61016d81836104a3565b8101906104c5565b508261014b565b503d610163565b8351903d90823e3d90fd5b6101a490843d861161017c5761016d81836104a3565b5087610102565b85513d86823e3d90fd5b903461028457826003193601126102845760c09260a083516101d681610471565b8281528260208201528285820152826060820152826080820152015281516101fd81610471565b6001549263ffffffff60e01b8460e01b1693848352602083019060018060a01b0394859384809360201c168452828060025416828801908152818080600354169560608b0196875254169660808a0197885260a082600554169a01998a5284519b8c52511660208b01525116908801525116606086015251166080840152511660a0820152f35b8280fd5b90503461009957816003193601126100995760ff602092541690519015158152f35b346102845760c0366003190112610284576102c59051610471565b80356001600160e01b031981168103610284576001600160a01b03916024358381168103610391576044359284841680940361038d576064359085821680920361038957608435928684168094036103855760a4359687168097036103855760015490640100000000600160c01b039060201b169160e01c9067ffffffffffffffff60c01b1617176001556bffffffffffffffffffffffff60a01b9384600254161760025583600354161760035582825416179055600554161760055580f35b8780fd5b8680fd5b8580fd5b8480fd5b82602092836003193601126100995760025483516323b872dd60e01b815233838201908152306020820152833560408201526001600160a01b03928791839185169082908890829060600103925af180156101ab579161013a9493918793610431575b50600154600654875163a9059cbb60e01b815233948101948552602085019190915295869391851c929092169183918691839160400190565b61044790843d861161017c5761016d81836104a3565b50876103f8565b3461046c57602036600319011261046c576020600654604051908152f35b600080fd5b60c0810190811067ffffffffffffffff82111761048d57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761048d57604052565b9081602091031261046c5751801515810361046c579056fea2646970667358221220cc4a81bcc57fa43f0fffef6c2f519f8a300737f28242b1b0cf98fb4e2f3954d964736f6c63430008120033";

type DummyStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyStrategy__factory extends ContractFactory {
  constructor(...args: DummyStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _config: IStrategy.StrategyConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyStrategy> {
    return super.deploy(_config, overrides || {}) as Promise<DummyStrategy>;
  }
  override getDeployTransaction(
    _config: IStrategy.StrategyConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_config, overrides || {});
  }
  override attach(address: string): DummyStrategy {
    return super.attach(address) as DummyStrategy;
  }
  override connect(signer: Signer): DummyStrategy__factory {
    return super.connect(signer) as DummyStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyStrategyInterface {
    return new utils.Interface(_abi) as DummyStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyStrategy {
    return new Contract(address, _abi, signerOrProvider) as DummyStrategy;
  }
}
