/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  DiamondCutFacet,
  DiamondCutFacetInterface,
} from "../../../../../../contracts/core/accounts/diamond/facets/DiamondCutFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "curInitializationcontractaddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "curCalldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "curDiamondcut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "curInit",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "curCalldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "curDiamondcut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "curInit",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "curCalldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576112c5908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c631f931c1c1461002857600080fd5b346108de5760603660031901126108de5767ffffffffffffffff600435116108de573660236004350112156108de57600435600401359067ffffffffffffffff82116108de573660248360051b6004350101116108de576001600160a01b0360243516602435036108de5767ffffffffffffffff604435116108de573660236044350112156108de5767ffffffffffffffff60443560040135116108de57366024604435600401356044350101116108de576001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633036108f9575061011d610118826109a7565b610981565b90602082828152018091602460043501915b60248260051b600435010183106107a0578385610154610118604435600401356109bf565b60443560048101358083529060240160208301376000602060443560040135830101526000915b80518310156106875760206101908483610a00565b5101516003811015610671578061034457506001600160a01b036101b48483610a00565b5151169160406101c48584610a00565b510151916101d483511515610a6a565b6101df841515610adb565b6bffffffffffffffffffffffff610228856001600160a01b03166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b5416918215610336575b6000925b845184101561031c576001600160e01b03196102528587610a00565b5116806000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020526001600160a01b03604060002054166102b257816102a1886102ac946102a694610ce8565b610b4c565b936109db565b92610236565b608460405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c72656164792065786973747300000000000000000000006064820152fd5b5094915094925061032e91505b6109db565b91909261017b565b61033f85610bbe565b610232565b919391600181036104ea57506001600160a01b036103628483610a00565b5151169360406103728584610a00565b5101519161038283511515610a6a565b61038d861515610adb565b6bffffffffffffffffffffffff6103d6876001600160a01b03166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b54169182156104dc575b6000925b84518410156104cc576001600160e01b03196104008587610a00565b5116806000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020526001600160a01b036040600020541691898314610462576102a18a82846104576102a69661045c98610e0d565b610ce8565b926103e4565b608460405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152fd5b50949150945061032e91506109db565b6104e587610bbe565b6103e0565b600203610607576001600160a01b036105038483610a00565b5151169360406105138584610a00565b5101519461052386511515610a6a565b61059d5760005b855181101561059057806103296001600160e01b031961054d61058b948a610a00565b5116806000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020526001600160a01b0360406000205416610e0d565b61052a565b509261032e9194506109db565b608460405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d7573742062652061646472657373283029000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e000000000000000000000000000000000000000000000000006064820152fd5b634e487b7160e01b600052602160045260246000fd5b9091506040519060608201906060835251809152608082019060808160051b84010194916000905b82821061070d5761070b867f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67387806107008c6001600160a01b03602435166020840152828103604084015285610a2a565b0390a1602435611154565b005b90919295607f1985820301825286516001600160a01b0381511682526020810151906003821015610671576040916020840152015190606060408201526020608060608301928451809452019201906000905b80821061077e575050506020806001929801920192019092916106af565b9091926020806001926001600160e01b03198751168152019401920190610760565b67ffffffffffffffff8335116108de576060600435843501360360231901126108de5760405180606081011067ffffffffffffffff6060830111176108e35760608101604052600435843501602401356001600160a01b03811690036108de57600435843501602481013582526044013560038110156108de5760208201526064843560043501013567ffffffffffffffff81116108de5736604382873560043501010112156108de5760248186356004350101013590610863610118836109a7565b91602083828152013660448360051b858b3560043501010101116108de576044838935600435010101905b60448360051b858b356004350101010182106108bb5750505050604082015281526020928301920161012f565b6001600160e01b03198235168235036108de57813581526020918201910161088e565b600080fd5b634e487b7160e01b600052604160045260246000fd5b8062461bcd60e51b6084925260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f65720000000000000000000000000000000000000000000000000000000000006064820152fd5b604051906060820182811067ffffffffffffffff8211176108e357604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176108e357604052565b67ffffffffffffffff81116108e35760051b60200190565b67ffffffffffffffff81116108e357601f01601f191660200190565b60001981146109ea5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610a145760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b919082519283825260005b848110610a56575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610a35565b15610a7157565b608460405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152fd5b15610ae257565b608460405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f65206164647265737328302900000000000000000000000000000000000000006064820152fd5b6bffffffffffffffffffffffff8091169081146109ea5760010190565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e8054821015610a14576000527fb5c239a29faf02594141bbc5e6982a9b85ba2b4d59c3ed3baaf4cb8e5e11cbef0190600090565b610c1f610bc9610961565b602481527f4c69624469616d6f6e644375743a204e657720666163657420686173206e6f2060208201527f636f646500000000000000000000000000000000000000000000000000000000604082015282611262565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e908154916001600160a01b0382166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205282600160406000200155680100000000000000008310156108e35782610ca3916001610cc395019055610b69565b90919082549060031b916001600160a01b03809116831b921b1916179055565b565b9190918054831015610a1457600052601c60206000208360031c019260021b1690565b92916001600160e01b03198416916001600160a01b03600092848452610d5e7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c938460205260408620906001600160a01b0373ffffffffffffffffffffffffffffffffffffffff1983549260a01b169116179055565b16928383527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d6020526040832080549068010000000000000000821015610df95796610db78260409798996001610dd495018155610cc5565b90919063ffffffff83549160031b9260e01c831b921b1916179055565b8252602052209073ffffffffffffffffffffffffffffffffffffffff19825416179055565b602485634e487b7160e01b81526041600452fd5b9190916001600160a01b0380911680156110ea57308114611080576001600160e01b03198094166000928184527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c926020918483526040948587205460a01c908388527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d9586865287892054926000199b8c850194851161106c57908991888c898c89808703610ff4575b505090525050508787525087892080548015610fe0578c0190610edb8282610cc5565b63ffffffff82549160031b1b191690555588528452868681205515610f05575b5050505050509050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e8054898101908111610fcc57838852858552826001888a20015491808303610f9a575b5050508054988915610f865760019798990191610f6583610b69565b909182549160031b1b19169055558552528220015580388080808080610efb565b602488634e487b7160e01b81526031600452fd5b610fa390610b69565b90549060031b1c16610fb881610ca384610b69565b885285855260018789200155388281610f49565b602488634e487b7160e01b81526011600452fd5b60248b634e487b7160e01b81526031600452fd5b61105f9784610db7936110138a94876110299952828a52848420610cc5565b90549060031b1c60e01b97889683525220610cc5565b168b52838852898b20906001600160a01b0373ffffffffffffffffffffffffffffffffffffffff1983549260a01b169116179055565b873880888c898c89610eb8565b60248b634e487b7160e01b81526011600452fd5b608460405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e0000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152fd5b906001600160a01b03821691821561125d57600080916111cb611175610961565b602a81527f4c69624469616d6f6e644375743a20637572496e69742061646472657373206860208201527f6173206e6f20636f646500000000000000000000000000000000000000000000604082015282611262565b83519060208501905af4913d15611255573d926111ea610118856109bf565b9384523d6000602086013e5b1561120057505050565b82511561120f57825160208401fd5b6112516040519283927f192105d70000000000000000000000000000000000000000000000000000000084526004840152604060248401526044830190610a2a565b0390fd5b6060926111f6565b505050565b3b1561126b5750565b6112519060405191829162461bcd60e51b8352602060048401526024830190610a2a56fea26469706673582212209f0fc0b8d778ec8e5051d3aefa19dca180cb3724f6697162a09f2aa1504911fa64736f6c63430008120033";

type DiamondCutFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCutFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCutFacet__factory extends ContractFactory {
  constructor(...args: DiamondCutFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondCutFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondCutFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondCutFacet {
    return super.attach(address) as DiamondCutFacet;
  }
  override connect(signer: Signer): DiamondCutFacet__factory {
    return super.connect(signer) as DiamondCutFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCutFacetInterface {
    return new utils.Interface(_abi) as DiamondCutFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondCutFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondCutFacet;
  }
}
