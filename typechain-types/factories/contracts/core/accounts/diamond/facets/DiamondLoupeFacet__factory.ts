/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  DiamondLoupeFacet,
  DiamondLoupeFacetInterface,
} from "../../../../../../contracts/core/accounts/diamond/facets/DiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "curFunctionselector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "curFacetaddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "curFacetaddresses",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "curFacet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "curFacetfunctionselectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "curFacets",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "curInterfaceid",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761075c908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a7146104785750806352ef6b2c146103945780637a0ed62714610177578063adfca15e146100be5763cdffacc61461005a57600080fd5b346100ba5760203660031901126100ba57356001600160e01b031981168091036100ba5781836001600160a01b0392602095527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c85522054169051908152f35b8280fd5b5090346100ba576020918260031936011261017357356001600160a01b0381168103610173578361012a61012585936001600160a01b03166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b61054e565b9083519383808695860192818752855180945286019401925b82811061015257505050500390f35b83516001600160e01b03191685528695509381019392810192600101610143565b8380fd5b5091346103915780600319360112610391577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e928354906101b78261050c565b946101c4855196876104d4565b828652601f196101d38461050c565b01845b81811061034a575050835b83811061029557858588825191602080840191818552835180935285850182878560051b880101950196825b85841061021a5787870388f35b90919293809596603f19898203018552895182606081878501936001600160a01b038151168652015193878382015284518094520192019084905b80821061027257505050988101989695946001019301919061020d565b919380600192946001600160e01b03198751168152019401920188939291610255565b81855261030d6001600160a01b03827fb5c239a29faf02594141bbc5e6982a9b85ba2b4d59c3ed3baaf4cb8e5e11cbef015416806102d3848b610524565b51526001600160a01b03166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b610324602061031c848b610524565b51019161054e565b90526000198114610337576001016101e1565b602485601185634e487b7160e01b835252fd5b865187810181811067ffffffffffffffff82111761037e579060209291895287815282606081830152828b010152016101d6565b602488604188634e487b7160e01b835252fd5b80fd5b8284346103915780600319360112610391579080519182907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e918254808652602080960190819484527fb5c239a29faf02594141bbc5e6982a9b85ba2b4d59c3ed3baaf4cb8e5e11cbef90845b81811061045b57505050816104179103826104d4565b83519485948186019282875251809352850193925b82811061043b57505050500390f35b83516001600160a01b03168552869550938101939281019260010161042c565b82546001600160a01b031684529288019260019283019201610401565b929190503461017357602036600319011261017357356001600160e01b031981168091036101735783527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602090815292205460ff1615158152f35b90601f8019910116810190811067ffffffffffffffff8211176104f657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116104f65760051b60200190565b80518210156105385760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b906040918251809382549283835260209182840191600052826000209460005b8160078201106106b357846105c9975493838310610694575b838310610675575b838310610656575b838310610637575b838310610618575b8383106105fb575b508282106105df575b50106105cb575b50905003836104d4565b565b6001600160e01b03191681520180386105bf565b600191946001600160e01b031985831b168152019301846105b8565b946001600160e01b031985600194971b16815201930184386105af565b9194816001916001600160e01b03198760601b168152019501916105a7565b9194816001916001600160e01b03198760801b1681520195019161059f565b9194816001916001600160e01b03198760a01b16815201950191610597565b9194816001916001600160e01b03198760c01b1681520195019161058f565b9194816001916001600160e01b03198760e01b16815201950191610587565b86546001600160e01b031960e082811b8216875260c083811b83168989015260a084811b8416888a0152608085811b85166060808c019190915286901b8516908a015284881b84169089015283891b8316908801529116908501526001909601958895506101009093019260080161056e56fea26469706673582212202132024e0a96effbb65aabd4c1043c556349dcf46f4181b30975c290f4cf28c464736f6c63430008120033";

type DiamondLoupeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondLoupeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: DiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondLoupeFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupeFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondLoupeFacet {
    return super.attach(address) as DiamondLoupeFacet;
  }
  override connect(signer: Signer): DiamondLoupeFacet__factory {
    return super.connect(signer) as DiamondLoupeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new utils.Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondLoupeFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupeFacet;
  }
}
