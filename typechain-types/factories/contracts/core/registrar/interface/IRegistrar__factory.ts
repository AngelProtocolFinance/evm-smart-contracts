/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IRegistrar,
  IRegistrarInterface,
} from "../../../../../contracts/core/registrar/interface/IRegistrar";

const _abi = [
  {
    inputs: [],
    name: "queryConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "applicationsReview",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexFundContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "accountsContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "treasury",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoGovCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoCw20TokenCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoBondingTokenCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoCw900Code",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoDistributorCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoEmitter",
            type: "address",
          },
          {
            internalType: "address",
            name: "donationMatchCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "donationMatchCharitesContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "donationMatchEmitter",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "defaultSplit",
                type: "uint256",
              },
            ],
            internalType: "struct AngelCoreStruct.SplitDetails",
            name: "splitToLiquid",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "haloToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "haloTokenLpContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "govContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "collectorAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "collectorShare",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "charitySharesContract",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "cw20",
                type: "address[]",
              },
            ],
            internalType: "struct AngelCoreStruct.AcceptedTokens",
            name: "acceptedTokens",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "fundraisingContract",
            type: "address",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "rebalanceLiquidInvestedProfits",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "lockedInterestsToLiquid",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "interest_distribution",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "lockedPrincipleToLiquid",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "principle_distribution",
                type: "uint256",
              },
            ],
            internalType: "struct AngelCoreStruct.RebalanceDetails",
            name: "rebalance",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "swapsRouter",
            type: "address",
          },
          {
            internalType: "address",
            name: "multisigFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "multisigEmitter",
            type: "address",
          },
          {
            internalType: "address",
            name: "charityProposal",
            type: "address",
          },
          {
            internalType: "address",
            name: "lockedWithdrawal",
            type: "address",
          },
          {
            internalType: "address",
            name: "proxyAdmin",
            type: "address",
          },
          {
            internalType: "address",
            name: "usdcAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "wethAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "cw900lvAddress",
            type: "address",
          },
        ],
        internalType: "struct RegistrarStorage.Config",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "queryFee",
    outputs: [
      {
        internalType: "uint256",
        name: "response",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "queryNetworkConnection",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "address",
            name: "axelerGateway",
            type: "address",
          },
          {
            internalType: "string",
            name: "ibcChannel",
            type: "string",
          },
          {
            internalType: "string",
            name: "transferChannel",
            type: "string",
          },
          {
            internalType: "address",
            name: "gasReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
        ],
        internalType: "struct AngelCoreStruct.NetworkInfo",
        name: "response",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_stratagyName",
        type: "string",
      },
    ],
    name: "queryVaultDetails",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "addr",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "network",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "inputDenom",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "enum AngelCoreStruct.EndowmentType[]",
            name: "restrictedFrom",
            type: "uint8[]",
          },
          {
            internalType: "enum AngelCoreStruct.AccountType",
            name: "acctType",
            type: "uint8",
          },
          {
            internalType: "enum AngelCoreStruct.VaultType",
            name: "vaultType",
            type: "uint8",
          },
        ],
        internalType: "struct AngelCoreStruct.YieldVault",
        name: "response",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "network",
        type: "uint256",
      },
      {
        internalType: "enum AngelCoreStruct.EndowmentType",
        name: "endowmentType",
        type: "uint8",
      },
      {
        internalType: "enum AngelCoreStruct.AccountType",
        name: "accountType",
        type: "uint8",
      },
      {
        internalType: "enum AngelCoreStruct.VaultType",
        name: "vaultType",
        type: "uint8",
      },
      {
        internalType: "enum AngelCoreStruct.BoolOptional",
        name: "approved",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "startAfter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "queryVaultList",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "addr",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "network",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "inputDenom",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "enum AngelCoreStruct.EndowmentType[]",
            name: "restrictedFrom",
            type: "uint8[]",
          },
          {
            internalType: "enum AngelCoreStruct.AccountType",
            name: "acctType",
            type: "uint8",
          },
          {
            internalType: "enum AngelCoreStruct.VaultType",
            name: "vaultType",
            type: "uint8",
          },
        ],
        internalType: "struct AngelCoreStruct.YieldVault[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "network",
        type: "uint256",
      },
      {
        internalType: "enum AngelCoreStruct.EndowmentType",
        name: "endowmentType",
        type: "uint8",
      },
      {
        internalType: "enum AngelCoreStruct.AccountType",
        name: "accountType",
        type: "uint8",
      },
      {
        internalType: "enum AngelCoreStruct.VaultType",
        name: "vaultType",
        type: "uint8",
      },
      {
        internalType: "enum AngelCoreStruct.BoolOptional",
        name: "approved",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "startAfter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "queryVaultListDep",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "addr",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "network",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "inputDenom",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "enum AngelCoreStruct.EndowmentType[]",
            name: "restrictedFrom",
            type: "uint8[]",
          },
          {
            internalType: "enum AngelCoreStruct.AccountType",
            name: "acctType",
            type: "uint8",
          },
          {
            internalType: "enum AngelCoreStruct.VaultType",
            name: "vaultType",
            type: "uint8",
          },
        ],
        internalType: "struct AngelCoreStruct.YieldVault[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testQuery",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testQueryStruct",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "addr",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "network",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "inputDenom",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "enum AngelCoreStruct.EndowmentType[]",
            name: "restrictedFrom",
            type: "uint8[]",
          },
          {
            internalType: "enum AngelCoreStruct.AccountType",
            name: "acctType",
            type: "uint8",
          },
          {
            internalType: "enum AngelCoreStruct.VaultType",
            name: "vaultType",
            type: "uint8",
          },
        ],
        internalType: "struct AngelCoreStruct.YieldVault[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "accountsContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taxRate",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "rebalanceLiquidInvestedProfits",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "lockedInterestsToLiquid",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "interest_distribution",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "lockedPrincipleToLiquid",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "principle_distribution",
                type: "uint256",
              },
            ],
            internalType: "struct AngelCoreStruct.RebalanceDetails",
            name: "rebalance",
            type: "tuple",
          },
          {
            internalType: "string[]",
            name: "approved_charities",
            type: "string[]",
          },
          {
            internalType: "uint256",
            name: "splitMax",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "splitMin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "splitDefault",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collectorShare",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "cw20",
                type: "address[]",
              },
            ],
            internalType: "struct AngelCoreStruct.AcceptedTokens",
            name: "acceptedTokens",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "subdaoGovCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoCw20TokenCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoBondingTokenCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoCw900Code",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoDistributorCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "subdaoEmitter",
            type: "address",
          },
          {
            internalType: "address",
            name: "donationMatchCode",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexFundContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "govContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "treasury",
            type: "address",
          },
          {
            internalType: "address",
            name: "donationMatchCharitesContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "donationMatchEmitter",
            type: "address",
          },
          {
            internalType: "address",
            name: "haloToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "haloTokenLpContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "charitySharesContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "fundraisingContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "applicationsReview",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapsRouter",
            type: "address",
          },
          {
            internalType: "address",
            name: "multisigFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "multisigEmitter",
            type: "address",
          },
          {
            internalType: "address",
            name: "charityProposal",
            type: "address",
          },
          {
            internalType: "address",
            name: "lockedWithdrawal",
            type: "address",
          },
          {
            internalType: "address",
            name: "proxyAdmin",
            type: "address",
          },
          {
            internalType: "address",
            name: "usdcAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "wethAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "cw900lvAddress",
            type: "address",
          },
        ],
        internalType: "struct RegistrarMessages.UpdateConfigRequest",
        name: "curDetails",
        type: "tuple",
      },
    ],
    name: "updateConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string[]",
            name: "keys",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
        ],
        internalType: "struct RegistrarMessages.UpdateFeeRequest",
        name: "curDetails",
        type: "tuple",
      },
    ],
    name: "updateFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "address",
            name: "axelerGateway",
            type: "address",
          },
          {
            internalType: "string",
            name: "ibcChannel",
            type: "string",
          },
          {
            internalType: "string",
            name: "transferChannel",
            type: "string",
          },
          {
            internalType: "address",
            name: "gasReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
        ],
        internalType: "struct AngelCoreStruct.NetworkInfo",
        name: "networkInfo",
        type: "tuple",
      },
      {
        internalType: "string",
        name: "action",
        type: "string",
      },
    ],
    name: "updateNetworkConnections",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "updateOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "network",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "stratagyName",
            type: "string",
          },
          {
            internalType: "address",
            name: "inputDenom",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "enum AngelCoreStruct.EndowmentType[]",
            name: "restrictedFrom",
            type: "uint8[]",
          },
          {
            internalType: "enum AngelCoreStruct.AccountType",
            name: "acctType",
            type: "uint8",
          },
          {
            internalType: "enum AngelCoreStruct.VaultType",
            name: "vaultType",
            type: "uint8",
          },
        ],
        internalType: "struct RegistrarMessages.VaultAddRequest",
        name: "curDetails",
        type: "tuple",
      },
    ],
    name: "vaultAdd",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_stratagyName",
        type: "string",
      },
    ],
    name: "vaultRemove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_stratagyName",
        type: "string",
      },
      {
        internalType: "bool",
        name: "curApproved",
        type: "bool",
      },
      {
        internalType: "enum AngelCoreStruct.EndowmentType[]",
        name: "curRestrictedfrom",
        type: "uint8[]",
      },
    ],
    name: "vaultUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IRegistrar__factory {
  static readonly abi = _abi;
  static createInterface(): IRegistrarInterface {
    return new utils.Interface(_abi) as IRegistrarInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRegistrar {
    return new Contract(address, _abi, signerOrProvider) as IRegistrar;
  }
}
