/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  RegistrarLib,
  RegistrarLibInterface,
} from "../../../../../contracts/core/registrar/registrar.sol/RegistrarLib";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "addr",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "network",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "inputDenom",
            type: "address",
          },
          {
            internalType: "address",
            name: "yieldToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "enum AngelCoreStruct.EndowmentType[]",
            name: "restrictedFrom",
            type: "AngelCoreStruct.EndowmentType[]",
          },
          {
            internalType: "enum AngelCoreStruct.AccountType",
            name: "acctType",
            type: "AngelCoreStruct.AccountType",
          },
          {
            internalType: "enum AngelCoreStruct.VaultType",
            name: "vaultType",
            type: "AngelCoreStruct.VaultType",
          },
        ],
        internalType: "struct AngelCoreStruct.YieldVault",
        name: "data",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "network",
        type: "uint256",
      },
      {
        internalType: "enum AngelCoreStruct.EndowmentType",
        name: "endowmentType",
        type: "AngelCoreStruct.EndowmentType",
      },
      {
        internalType: "enum AngelCoreStruct.AccountType",
        name: "accountType",
        type: "AngelCoreStruct.AccountType",
      },
      {
        internalType: "enum AngelCoreStruct.VaultType",
        name: "vaultType",
        type: "AngelCoreStruct.VaultType",
      },
      {
        internalType: "enum AngelCoreStruct.BoolOptional",
        name: "approved",
        type: "AngelCoreStruct.BoolOptional",
      },
    ],
    name: "filterVault",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a576104899081610020823930815050f35b600080fdfe60806004908136101561001157600080fd5b600091823560e01c63c5795f911461002857600080fd5b6003199060c0368301126102305780359267ffffffffffffffff928385116101d057610100809186360301126101d05781018181108482111761021d57604052838201358381116101d057840193366023860112156101d057828501359380851161020a57602095876100a3601f8801601f19168901610234565b91878352602497368982840101116102065780898b93018386013783010152835284820135868401526100d860448301610270565b60408401526100e960648301610270565b6060840152608482013580151581036101c857608084015260a48201358181116101c8578201366023820112156101c857848101359182116101f4578160051b8688610136818401610234565b809581520191830101913683116101f0578701905b8282106101d45750505060a083015260c48101359060038210156101cc5760e49160c08401520135828110156101d05760e082015260443560038110156101d0576064359160038310156101cc57608435938410156101cc5760a4359460038610156101c8576101be96975035906102a9565b6040519015158152f35b8780fd5b8680fd5b8580fd5b813560038110156101ec57815290880190880161014b565b8a80fd5b8980fd5b634e487b7160e01b8852604185528588fd5b8280fd5b634e487b7160e01b875260418452602487fd5b634e487b7160e01b865260418352602486fd5b8380fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761025a57604052565b634e487b7160e01b600052604160045260246000fd5b35906001600160a01b038216820361028457565b600080fd5b6003111561029357565b634e487b7160e01b600052602160045260246000fd5b93929190946102b781610289565b600281036103fe575b506102ca81610289565b6002810361036f575b506102dd81610289565b6002810361033c575b506004811015610293576003810361031c575b5081610307575b5050600190565b6020015103610317573880610300565b600090565b60e08201516004811015610293570361033557386102f9565b5050600090565b60c083015161034a81610289565b61035382610289565b61035c81610289565b0361036757386102e6565b505050600090565b9390949192600093845b60a083015180518210156103e357602088918360051b01015161039b81610289565b6103a482610289565b6103ad81610289565b146103da575b60001981146103c457600101610379565b634e487b7160e01b600052601160045260246000fd5b600195506103b3565b50509295919450926103f557386102d3565b50505050600090565b61040781610289565b60018114610439575b61041981610289565b15610425575b386102c0565b60808401511561041f575050505050600090565b60016080860151151503156104105750505050505060009056fea2646970667358221220593d87dc312d6e79ada78f5fad0d88c162b0b0b67b4a4041bc42e65cc8436e9c64736f6c63430008120033";

type RegistrarLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistrarLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistrarLib__factory extends ContractFactory {
  constructor(...args: RegistrarLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RegistrarLib> {
    return super.deploy(overrides || {}) as Promise<RegistrarLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RegistrarLib {
    return super.attach(address) as RegistrarLib;
  }
  override connect(signer: Signer): RegistrarLib__factory {
    return super.connect(signer) as RegistrarLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistrarLibInterface {
    return new utils.Interface(_abi) as RegistrarLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistrarLib {
    return new Contract(address, _abi, signerOrProvider) as RegistrarLib;
  }
}
