/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../../common";
import type {
  AngelCoreStruct,
  AngelCoreStructInterface,
} from "../../../../contracts/core/struct.sol/AngelCoreStruct";

const _abi = [
  {
    inputs: [],
    name: "accountStrategiesDefaut",
    outputs: [
      {
        components: [
          {
            internalType: "string[]",
            name: "locked_vault",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "lockedPercentage",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "liquid_vault",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "liquidPercentage",
            type: "uint256[]",
          },
        ],
        internalType: "struct AngelCoreStruct.AccountStrategies",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "beneficiaryDefault",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint32",
                name: "endowId",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "fundId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
            ],
            internalType: "struct AngelCoreStruct.BeneficiaryData",
            name: "data",
            type: "tuple",
          },
          {
            internalType: "enum AngelCoreStruct.BeneficiaryEnum",
            name: "enumData",
            type: "AngelCoreStruct.BeneficiaryEnum",
          },
        ],
        internalType: "struct AngelCoreStruct.Beneficiary",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "max",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "min",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defaultSplit",
            type: "uint256",
          },
        ],
        internalType: "struct AngelCoreStruct.SplitDetails",
        name: "splits",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "userLocked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "userLiquid",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "userOverride",
        type: "bool",
      },
    ],
    name: "checkSplits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deductamount",
        type: "uint256",
      },
    ],
    name: "deductTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "oneOffVaultsDefault",
    outputs: [
      {
        components: [
          {
            internalType: "string[]",
            name: "locked",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "lockedAmount",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "liquid",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "liquidAmount",
            type: "uint256[]",
          },
        ],
        internalType: "struct AngelCoreStruct.OneOffVaults",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "payoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "percentage",
            type: "uint256",
          },
        ],
        internalType: "struct AngelCoreStruct.EndowmentFee",
        name: "fee",
        type: "tuple",
      },
    ],
    name: "validateFee",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001c5761126c90816100228239308160080152f35b600080fdfe604060808152307f0000000000000000000000000000000000000000000000000000000000000000146004908136101561003857600080fd5b600090813560e01c9081632a0bc06014610635578163564343ff14610b2557816367efb78614610af05781636f331a1414610aa5578163855762df1461088f57816393dae3f714610752578163973d5ef51461066e578163ad60ed5a14610635578163b4feed2a14610604578163b8108b2c1461054f578163b9fb75c5146104ef578163bb37a28314610472578163d0352ce81461040a578163e84b82f71461025b575063e9f47427146100eb57600080fd5b60603660031901126102585781359267ffffffffffffffff91828511610258573660238601121561025857848401359361012485610e6a565b9561013184519788610df1565b85875260209560248789019160051b8301019136831161025457602401905b8282106102315750505060243593841161022d573660238501121561022d578301359261017c84610e6a565b9361018984519586610df1565b80855260248686019160051b8301019136831161022957929592602401905b82821061021a575050506101ba610d63565b6001600160a01b0390811691855b875160ff8216908110156102115784846101e2838c61116a565b5116146101f9575b506101f490611159565b6101c8565b6101f4919750610209908761116a565b5196906101ea565b82888751908152f35b813581529083019083016101a8565b8380fd5b5080fd5b81356001600160a01b0381168103610250578152908701908701610150565b8580fd5b8480fd5b80fd5b848484926104065781600319360112610406578035602491823567ffffffffffffffff8111610250576102919036908301610e13565b938594602091828201965b855460001981019081116103f457808210156103e6576102bc8288610ea7565b5083516102de816102d08982018095610f0f565b03601f198101835282610df1565b5190206102fd8a61030a88875180938282019586918c51928391610c13565b8101038084520182610df1565b51902014610321575061031c90610e82565b61029c565b8661034995969798995061033b9294506103439350610ea7565b509186610ea7565b906110cf565b825480156103d45760001901936103608585610ea7565b9390936103c45750509084916103768254610ed5565b9081610385575b505050505580f35b8390601f83116001146103a057505050555b8284808061037d565b83825281209290916103bd90601f0160051c840160018501610f92565b5555610397565b634e487b7160e01b875286905285fd5b634e487b7160e01b8652603183528486fd5b505050509091929350610349565b634e487b7160e01b8a5260118652878afd5b8280fd5b50508260031936011261025857508035602435918282111561043a57602084610433858561114c565b9051908152f35b606490602085519162461bcd60e51b83528201526012602482015271496e73756666696369656e742046756e647360701b6044820152fd5b82858560803660031901126104065760209250359061048f610d4d565b610497610d63565b9060ff8454161593846104b0575b505050519015158152f35b816104c59293949550600160643592016111e7565b9182156104d8575b5050908380806104a5565b6001600160a01b03918216911614905083806104cd565b828585366003190160c08112610229576060136104065781519061051282610dd5565b35815260243560208201526044358282015260a435908115158203610229579061054391608435906064359061117e565b82519182526020820152f35b8385848060031936011261025857806020835161056b81610da3565b845161057681610dd5565b838152838382015283868201528152015281519161059383610dd5565b8183526020830190828252808401838152602082516105b181610da3565b868152600391019081528251955163ffffffff16865292516020860152516001600160a01b0316908401525190838210156105f157608083836060820152f35b634e487b7160e01b815260218452602490fd5b8385846060366003190112610258575061062c602092610622610d4d565b60443591356111e7565b90519015158152f35b82858160031936011261022d5761066a9061064e611117565b50610657611117565b9051918291602083526020830190610cdb565b0390f35b8285916102585761067e36610d32565b829192935b835485101561074e57600193835b835481101561071e576106a48783610ea7565b508351906106f16106fd602092846106bf8582018093610f0f565b03946106d3601f1996878101835282610df1565b519020936106e1868a610ea7565b5093885193849182018096610f0f565b03908101835282610df1565b51902014610714575b61070f90610e82565b610691565b9394508493610706565b50939461072f919561073557610e82565b93610683565b6107496107428287610ea7565b50846110f4565b610e82565b8280f35b5050918060031936011261040657805161076b81610da3565b8235906001600160a01b038216908183036102505760209281526024359283910152156000146107e657815162461bcd60e51b8152602081850152602560248201527f496e76616c696420666565207061796f7574207a65726f20616464726573732060448201526433b4bb32b760d91b6064820152608490fd5b612710811090811591610881575b506107fd578280f35b90602060a492519162461bcd60e51b8352820152605260248201527f496e76616c6964206665652070657263656e7461676520676976656e2e20536860448201527f6f756c64206265206265747765656e20313030303020746f2031303030303030606482015271181810143130b9b4b9903837b4b73a39949760711b6084820152fd5b6305f5e100915010386107f4565b84915061022d57606036600319011261022d578235906024359067ffffffffffffffff604435818111610250576108c99036908801610e13565b9160018690865491602093848701915b8460ff821610610a4d575050506108ee578680f35b600160401b9586821015610a3a579061090c91600182018155610ea7565b939093610a28578051928311610a15579082916109338361092d8754610ed5565b87610fa9565b81601f84116001146109af575087926109a4575b50508160011b916000199060031b1c19161790555b80549182101561099157610977929350600182018155610ea7565b8154906000199060031b1b19169055808280808080808680f35b634e487b7160e01b835260418452602483fd5b015190508780610947565b8589528089209350601f1985169089905b8282106109fd5750509084600195949392106109e4575b505050811b01905561095c565b015160001960f88460031b161c191690558780806109d7565b806001869782949787015181550196019401906109c0565b634e487b7160e01b875260418852602487fd5b634e487b7160e01b8752868852602487fd5b634e487b7160e01b885260418952602488fd5b610a57818b610ea7565b508251610a6b816102d08a82018095610f0f565b519020825187810190610a8689828d516102fd81878c610c13565b51902014610a9d575b610a9890611159565b6108d9565b8a9350610a8f565b8484849261040657600191610ab936610d79565b949190828060a01b03168652016020528320908154928301809311610add57505580f35b634e487b7160e01b845260119052602483fd5b84915061022d57610b20600191610b0636610d79565b949190828060a01b0316865201602052832091825461114c565b905580f35b82859161025857610b3536610d32565b919081935b600293848301908154871015610c0f57600193855b8783018054821015610bcf57610b658a86610ea7565b506106f1610bb08851610ba08660209583610b838882018093610f0f565b0393610b97601f1995868101835282610df1565b51902096610ea7565b50938a5193849182018096610f0f565b51902014610bc7575b610bc290610e82565b610b4f565b869550610bb9565b5050958792610be894989295610bf1575b505050610e82565b93929092610b3a565b610c0792610bfe91610ea7565b509085016110f4565b808780610be0565b8480f35b60005b838110610c265750506000910152565b8181015183820152602001610c16565b908082519081815260208091019281808460051b8301019501936000915b848310610c645750505050505090565b909192939495848080600193601f1980878303018852601f8c51610c9381518092818752878088019101610c13565b011601019801930193019194939290610c54565b90815180825260208080930193019160005b828110610cc7575050505090565b835185529381019392810192600101610cb9565b610d2f916060610d1e610d0c610cfa8551608086526080860190610c36565b60208601518582036020870152610ca7565b60408501518482036040860152610c36565b920151906060818403910152610ca7565b90565b6040906003190112610d48576004359060243590565b600080fd5b602435906001600160a01b0382168203610d4857565b604435906001600160a01b0382168203610d4857565b6060906003190112610d4857600435906024356001600160a01b0381168103610d48579060443590565b6040810190811067ffffffffffffffff821117610dbf57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610dbf57604052565b90601f8019910116810190811067ffffffffffffffff821117610dbf57604052565b81601f82011215610d485780359067ffffffffffffffff8211610dbf5760405192610e48601f8401601f191660200185610df1565b82845260208383010111610d4857816000926020809301838601378301015290565b67ffffffffffffffff8111610dbf5760051b60200190565b6000198114610e915760010190565b634e487b7160e01b600052601160045260246000fd5b8054821015610ebf5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015610f05575b6020831014610eef57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610ee4565b600092918154610f1e81610ed5565b92600191808316908115610f775750600114610f3b575b50505050565b90919293945060005260209081600020906000915b858310610f665750505050019038808080610f35565b805485840152918301918101610f50565b60ff1916845250505081151590910201915038808080610f35565b818110610f9d575050565b60008155600101610f92565b9190601f8111610fb857505050565b610fe4926000526020600020906020601f840160051c83019310610fe6575b601f0160051c0190610f92565b565b9091508190610fd7565b908082146110cb576110028154610ed5565b9067ffffffffffffffff8211610dbf578190611028826110228654610ed5565b86610fa9565b600090601f831160011461105f57600092611054575b50508160011b916000199060031b1c1916179055565b01549050388061103e565b81526020808220858352818320935090601f1985169083905b8282106110b2575050908460019594939210611099575b505050811b019055565b015460001960f88460031b161c1916905538808061108f565b8495819295850154815560018091019601940190611078565b5050565b91906110de57610fe491610ff0565b634e487b7160e01b600052600060045260246000fd5b90815491600160401b831015610dbf5782610343916001610fe495018155610ea7565b604051906080820182811067ffffffffffffffff821117610dbf57604052606080838181528160208201528160408201520152565b91908203918211610e9157565b60ff1660ff8114610e915760010190565b8051821015610ebf5760209160051b010190565b921561119c5750506040019081516064039160648311610e91575190565b82518211156111ba5750505190816064039160648311610e91579190565b909291602001928351918282106000146111e05750506064039160648311610e91575190565b9350919050565b80546001600160a01b0390811680151594939091908561122a575b5050508261120f57505090565b600101548015925090821561122357505090565b1115905090565b1614925038808061120256fea264697066735822122078ce09e5dc7a23cfcfb434838c952d217a8bddc0cbfdcde75ee307ea8f89e07b64736f6c63430008120033";

type AngelCoreStructConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AngelCoreStructConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AngelCoreStruct__factory extends ContractFactory {
  constructor(...args: AngelCoreStructConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<AngelCoreStruct> {
    return super.deploy(overrides || {}) as Promise<AngelCoreStruct>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AngelCoreStruct {
    return super.attach(address) as AngelCoreStruct;
  }
  override connect(signer: Signer): AngelCoreStruct__factory {
    return super.connect(signer) as AngelCoreStruct__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AngelCoreStructInterface {
    return new utils.Interface(_abi) as AngelCoreStructInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): AngelCoreStruct {
    return new Contract(address, _abi, signerOrProvider) as AngelCoreStruct;
  }
}
