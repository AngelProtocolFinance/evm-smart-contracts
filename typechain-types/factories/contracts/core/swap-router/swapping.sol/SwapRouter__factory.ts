/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SwapRouter,
  SwapRouterInterface,
} from "../../../../../contracts/core/swap-router/swapping.sol/SwapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "executeSwapOperations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "accountsContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapRouter",
            type: "address",
          },
        ],
        internalType: "struct SwapRouterMessages.InstantiateMsg",
        name: "details",
        type: "tuple",
      },
    ],
    name: "initSwapRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "swapEthToAnyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapEthToToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokena",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountin",
        type: "uint256",
      },
    ],
    name: "swapTokenToUsdc",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761108f908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081634238e1371461053d575080635bf1322a146103ea57806375477365146102c957806375c9f3ac1461012b576379470bc91461005a57600080fd5b3461012757816003193601126101275761007261079a565b6001546001600160a01b03929083169190338314801561011a575b61009690610d7f565b84519283809263e68f909d60e01b82526103e09586935afa92831561011057906100da94939291602097936100e1575b50503392610340602435930151169061089e565b9051908152f35b610101929350803d10610109575b6100f98183610778565b810190610dba565b9038806100c6565b503d6100ef565b85513d88823e3d90fd5b506002548416331461008d565b8280fd5b509190816003193601126102c5576001546001600160a01b0390811633811480156102b8575b61015a90610d7f565b61016534151561101c565b8251809163e68f909d60e01b825281876103e09485935afa9182156102ae578592610291575b505061036081019482806101ac610340828a51169501948286511690610b35565b97511692511692610258420180421161027e5790610222949392918651936101d385610745565b845262ffffff6020998a9687870152168785015233606085015260808401523460a08401528660c08401528660e08401526003541690855180958194829363414bf38960e01b84528301610837565b039134905af192831561027357809361023e575b505051908152f35b909192508382813d831161026c575b6102578183610778565b81010312610269575051903880610236565b80fd5b503d61024d565b8251903d90823e3d90fd5b634e487b7160e01b875260118352602487fd5b6102a79250803d10610109576100f98183610778565b388061018b565b84513d87823e3d90fd5b5060025482163314610151565b5080fd5b50919060209283600319360112610127576102e261079a565b906102ee34151561101c565b600154835163e68f909d60e01b81526001600160a01b03916103e09190829082908690829087165afa9182156103e05790610360929188926103c3575b505001928161033d8282875116610b35565b945116936102584201918242116103b0579162ffffff849261022297958b97958a519761036989610745565b88521687870152168785015233606085015260808401523460a08401528660c08401528660e08401526003541690855180958194829363414bf38960e01b84528301610837565b634e487b7160e01b885260118552602488fd5b6103d99250803d10610109576100f98183610778565b388061032b565b86513d89823e3d90fd5b508290346102c55760803660031901126102c55761040661079a565b9161041f6104126107b5565b933090856044359161089e565b9260643584106104e957845163a9059cbb60e01b81523384820190815260208181018790529192839182908690829060400103926001600160a01b03165af19182156104de57916104b0575b501561047b575060209151908152f35b606490602084519162461bcd60e51b8352820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b6104d1915060203d81116104d7575b6104c98183610778565b81019061081f565b8461046b565b503d6104bf565b8551903d90823e3d90fd5b845162461bcd60e51b8152602081850152602860248201527f4f75747075742066756e6473206c657373207468616e20746865206d696e696d604482015267756d2066756e647360c01b6064820152608490fd5b9192905034610741576080366003190112610741576080820182811067ffffffffffffffff82111761072e57815261057361079a565b825261057d6107b5565b60208301908152604435926001600160a01b039190828516850361072a57838101948552606435908382168203610726576060810191825286549460ff8660a01c166106ef575090838080935116936bffffffffffffffffffffffff60a01b9485600154161760015551168360025416176002555116906003541617600355600160a01b925116906affffffffffffffffffffff60a81b161717815581546801000000000000000090818110156106dc5780600161063d920185556107cb565b929080549360031b62ffffff94856101f4831b921b19161790558354828110156106c957806001610670920186556107cb565b81549060031b9085610bb8831b921b19161790558354918210156106b6575080600161069e920184556107cb565b819291549060031b91612710831b921b191617905580f35b634e487b7160e01b845260419052602483fd5b634e487b7160e01b855260418252602485fd5b634e487b7160e01b845260418352602484fd5b5162461bcd60e51b81526020818901526012602482015271105b1c9958591e48125b9a5d1a5b1a5e995960721b6044820152606490fd5b8780fd5b8680fd5b634e487b7160e01b855260418452602485fd5b8380fd5b610100810190811067ffffffffffffffff82111761076257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761076257604052565b600435906001600160a01b03821682036107b057565b600080fd5b602435906001600160a01b03821682036107b057565b9060005482101561080957600080526003600a8084047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630193060290565b634e487b7160e01b600052603260045260246000fd5b908160209103126107b0575180151581036107b05790565b91909160e06101008201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b93929362ffffff6108af8383610b35565b16908115610adc5760018060a01b03809116906040948551946323b872dd60e01b8652600498338a88015230602488015282604488015260209560009787816064818c8b5af1908115610a7c578991610abf575b5015610a8657600354895163095ea7b360e01b81529086166001600160a01b03168c82019081526020810186905288908290819060400103818c8b5af1908115610a7c578991610a5f575b5015610a2b57610258420192834211610a185794899a9b9492819492828a99986109c39d519961097d8b610745565b8a5216898901528c880152166060860152608085015260a08401528560c08401528560e0840152600354169085885180988195829463414bf38960e01b84528301610837565b03925af1938415610a0d575081936109dc575b50505090565b9091809350813d8311610a06575b6109f48183610778565b810103126102695750513880806109d6565b503d6109ea565b51913d9150823e3d90fd5b634e487b7160e01b895260118c52602489fd5b885162461bcd60e51b8152808c01889052600e60248201526d105c1c1c9bdd994819985a5b195960921b6044820152606490fd5b610a769150883d8a116104d7576104c98183610778565b3861094e565b8a513d8b823e3d90fd5b885162461bcd60e51b8152808c018890526013602482015272151c985b9cd9995c919c9bdb4819985a5b1959606a1b6044820152606490fd5b610ad69150883d8a116104d7576104c98183610778565b38610903565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420546f6b656e2053656e6420746f20737761700000000000006044820152606490fd5b51906001600160a01b03821682036107b057565b6001600160a01b039290838116908115610d48578484168015610d1157808314610cbe5785921015610cb8575b168015610c73576000809460049481865416965b600380821015610c6757610b89826107cb565b919062ffffff9283915490831b1c16604090815190630b4c774160e11b8252898c83015287871660248301526044820152808c81606460209384935afa928315610c5d575090879291600092610c25575b505016610c095750506000198114610bf457600101610b76565b601187634e487b7160e01b6000525260246000fd5b969850965092505050610c1c91506107cb565b9054911b1c1690565b90809350813d8311610c56575b610c3c8183610778565b810103126102695750610c4f8691610b21565b3880610bda565b503d610c32565b513d6000823e3d90fd5b50505050925050915090565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b92610b62565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b2102a37b5b2b7102160891b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420546f6b656e204160881b6044820152606490fd5b15610d8657565b60405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606490fd5b8091036103e081126107b0576040908151926103a09081850167ffffffffffffffff9386821085831117610762576060918652610df683610b21565b8752610e0460208401610b21565b6020880152610e14868401610b21565b86880152610e23828401610b21565b82880152610e3360808401610b21565b6080880152610e4460a08401610b21565b60a0880152610e5560c08401610b21565b60c0880152610e6660e08401610b21565b60e0880152610100610e79818501610b21565b90880152610120610e8b818501610b21565b90880152610140610e9d818501610b21565b90880152610160610eaf818501610b21565b90880152610180610ec1818501610b21565b9088015261019f1901126107b05783519360608501938411858510176107625761100b6103c0936110159583526101a0968785015181526101c0978886015160208301526101e094858701519083015289015261020096610f23888601610b21565b9089015261022092610f36848601610b21565b9089015261024096610f49888601610b21565b9089015261026092838501519089015261028096610f68888601610b21565b908901526102a092610f7b848601610b21565b908901526102c096610f8e888601610b21565b908901526102e092610fa1848601610b21565b9089015261030096610fb4888601610b21565b9089015261032092610fc7848601610b21565b9089015261034096610fda888601610b21565b9089015261036092610fed848601610b21565b9089015261038096611000888601610b21565b908901528301610b21565b9086015201610b21565b9082015290565b1561102357565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908105b5bdd5b9d60921b6044820152606490fdfea2646970667358221220b08678e0f1a4ec22ac18873d306dcfded1c0276764a4bc52bd295e2459819e9464736f6c63430008120033";

type SwapRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter__factory extends ContractFactory {
  constructor(...args: SwapRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouter> {
    return super.deploy(overrides || {}) as Promise<SwapRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouter {
    return super.attach(address) as SwapRouter;
  }
  override connect(signer: Signer): SwapRouter__factory {
    return super.connect(signer) as SwapRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterInterface {
    return new utils.Interface(_abi) as SwapRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouter {
    return new Contract(address, _abi, signerOrProvider) as SwapRouter;
  }
}
