/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../../../common";
import type {
  SwapRouter,
  SwapRouterInterface,
} from "../../../../../contracts/core/swap-router/swapping.sol/SwapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
    ],
    name: "executeSwaps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "accountsContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapRouter",
            type: "address",
          },
        ],
        internalType: "struct SwapRouterMessages.InstantiateMsg",
        name: "details",
        type: "tuple",
      },
    ],
    name: "initSwapRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapMaticToWrappedMatic",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610e4d908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c9081634238e1371461085c5750806366992fcd146103e757638f088fe21461004657600080fd5b346102cf5760803660031901126102cf5761005f610ab5565b610067610ad0565b936044803562ffffff61007a8886610bcd565b1680156103a55760018060a01b038095168651956323b872dd60e01b875233868801526024933085890152808689015260209a888c818d60649c8d91895af1908115610346578c91610388575b5015610350576003548a5163095ea7b360e01b81529084166001600160a01b0316898201908152602081018490528d9082908e90829081906040010391895af1908115610346578c91610329575b50156102f6576102584201908142116102e45792610188928c969592828f968e519561014087610a60565b8652169687878601528d850152306060850152608084015260a08301528560c08301528560e083015260035416908a519b8c8094819363414bf38960e01b83528c8301610b52565b03925af19788156102da5782986102a7575b508535881061025657865163a9059cbb60e01b815233868201908152602081018a905290918a9183919082908690829060400103925af191821561024b579161021e575b50156101ee575050505051908152f35b845162461bcd60e51b8152928301879052600f908301526e151c985b9cd9995c8819985a5b1959608a1b90820152fd5b61023e9150883d8a11610244575b6102368183610a93565b810190610b3a565b386101de565b503d61022c565b8751903d90823e3d90fd5b5050927f4f75747075742066756e6473206c657373207468616e20746865206d696e696d67756d2066756e647360c01b9260286084968a89519762461bcd60e51b8952880152860152840152820152fd5b9097508881813d83116102d3575b6102bf8183610a93565b810103126102cf5751963861019a565b5080fd5b503d6102b5565b87513d84823e3d90fd5b634e487b7160e01b8c5260118952868cfd5b505050505090600e6d105c1c1c9bdd994819985a5b195960921b928887519562461bcd60e51b8752860152840152820152fd5b61034091508d803d10610244576102368183610a93565b38610115565b8b513d8e823e3d90fd5b505050505090601372151c985b9cd9995c919c9bdb4819985a5b1959606a1b928887519562461bcd60e51b8752860152840152820152fd5b61039f91508d803d10610244576102368183610a93565b386100c7565b855162461bcd60e51b8152602081860152601a60248201527f496e76616c696420546f6b656e2053656e6420746f207377617000000000000081850152606490fd5b50816003193601126102cf576002546001600160a01b03908116330361082a5734156107f65780600154168251809163e68f909d60e01b825281876103e09485935afa9182156107ec57859261053e575b50506103608101948280610459610340828a51169501948286511690610bcd565b97511692511692610258420180421161052b57906104cf9493929186519361048085610a60565b845262ffffff6020998a9687870152168785015233606085015260808401523460a08401528660c08401528660e08401526003541690855180958194829363414bf38960e01b84528301610b52565b039134905af19283156105205780936104eb575b505051908152f35b909192508382813d8311610519575b6105048183610a93565b810103126105165750519038806104e3565b80fd5b503d6104fa565b8251903d90823e3d90fd5b634e487b7160e01b875260118352602487fd5b90809250813d83116107e5575b6105558183610a93565b8101039081126107e1578351916103a08084019267ffffffffffffffff93858110858211176107ce57875260609061058c84610bb9565b865261059a60208501610bb9565b60208701526105aa888501610bb9565b888701526105b9828501610bb9565b828701526105c960808501610bb9565b60808701526105da60a08501610bb9565b60a08701526105eb60c08501610bb9565b60c08701526105fc60e08501610bb9565b60e087015261010061060f818601610bb9565b90870152610120610621818601610bb9565b90870152610140610633818601610bb9565b90870152610160610645818601610bb9565b90870152610180610657818601610bb9565b9087015261019f1901126107ca5785519260608401908111848210176107b757916103c0916107ac9388526107a26101a0918284015187526101c0968785015160208201526101e093848601518c830152890152610200966106ba888601610bb9565b90890152610220926106cd848601610bb9565b90890152610240966106e0888601610bb9565b90890152610260928385015190890152610280966106ff888601610bb9565b908901526102a092610712848601610bb9565b908901526102c096610725888601610bb9565b908901526102e092610738848601610bb9565b908901526103009661074b888601610bb9565b908901526103209261075e848601610bb9565b9089015261034096610771888601610bb9565b9089015261036092610784848601610bb9565b9089015261038096610797888601610bb9565b908901528301610bb9565b9086015201610bb9565b908201523880610438565b634e487b7160e01b885260418952602488fd5b8680fd5b634e487b7160e01b895260418a52602489fd5b8480fd5b503d61054b565b84513d87823e3d90fd5b815162461bcd60e51b8152602081860152600e60248201526d125b9d985b1a5908105b5bdd5b9d60921b6044820152606490fd5b815162461bcd60e51b8152602081860152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606490fd5b9050839134610a5c576080366003190112610a5c576080820182811067ffffffffffffffff821117610a49578152610892610ab5565b825261089c610ad0565b60208301908152604435926001600160a01b03919082851685036107ca57838101948552606435908382168203610a45576060810191825286549460ff8660a01c16610a0e575090838080935116936bffffffffffffffffffffffff60a01b9485600154161760015551168360025416176002555116906003541617600355600160a01b925116906affffffffffffffffffffff60a81b161717815581546801000000000000000090818110156109fb5780600161095c92018555610ae6565b929080549360031b62ffffff94856101f4831b921b19161790558354828110156109e85780600161098f92018655610ae6565b81549060031b9085610bb8831b921b19161790558354918210156109d557508060016109bd92018455610ae6565b819291549060031b91612710831b921b191617905580f35b634e487b7160e01b845260419052602483fd5b634e487b7160e01b855260418252602485fd5b634e487b7160e01b845260418352602484fd5b5162461bcd60e51b81526020818901526012602482015271105b1c9958591e48125b9a5d1a5b1a5e995960721b6044820152606490fd5b8780fd5b634e487b7160e01b855260418452602485fd5b8380fd5b610100810190811067ffffffffffffffff821117610a7d57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a7d57604052565b600435906001600160a01b0382168203610acb57565b600080fd5b602435906001600160a01b0382168203610acb57565b90600054821015610b2457600080526003600a8084047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630193060290565b634e487b7160e01b600052603260045260246000fd5b90816020910312610acb57518015158103610acb5790565b91909160e06101008201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b51906001600160a01b0382168203610acb57565b6001600160a01b039290838116908115610de0578484168015610da957808314610d565785921015610d50575b168015610d0b576000809460049481865416965b600380821015610cff57610c2182610ae6565b919062ffffff9283915490831b1c16604090815190630b4c774160e11b8252898c83015287871660248301526044820152808c81606460209384935afa928315610cf5575090879291600092610cbd575b505016610ca15750506000198114610c8c57600101610c0e565b601187634e487b7160e01b6000525260246000fd5b969850965092505050610cb49150610ae6565b9054911b1c1690565b90809350813d8311610cee575b610cd48183610a93565b810103126105165750610ce78691610bb9565b3880610c72565b503d610cca565b513d6000823e3d90fd5b50505050925050915090565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b92610bfa565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b2102a37b5b2b7102160891b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420546f6b656e204160881b6044820152606490fdfea2646970667358221220bb78b6a49f2c676609ccad539ed4e82d0f0cefac6bdbc7598888f4160d2a5cbd64736f6c63430008120033";

type SwapRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter__factory extends ContractFactory {
  constructor(...args: SwapRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & {from?: PromiseOrValue<string>}): Promise<SwapRouter> {
    return super.deploy(overrides || {}) as Promise<SwapRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouter {
    return super.attach(address) as SwapRouter;
  }
  override connect(signer: Signer): SwapRouter__factory {
    return super.connect(signer) as SwapRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterInterface {
    return new utils.Interface(_abi) as SwapRouterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SwapRouter {
    return new Contract(address, _abi, signerOrProvider) as SwapRouter;
  }
}
