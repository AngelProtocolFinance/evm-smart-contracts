/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../../../common";
import type {
  SwapRouter,
  SwapRouterInterface,
} from "../../../../../contracts/core/swap-router/swapping.sol/SwapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
    ],
    name: "executeSwaps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "accountsContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapRouter",
            type: "address",
          },
        ],
        internalType: "struct SwapRouterMessages.InstantiateMsg",
        name: "details",
        type: "tuple",
      },
    ],
    name: "initSwapRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610956908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081634238e137146106ae5750638f088fe21461003557600080fd5b3461043a57608036600319011261043a5761004e610888565b61005661089e565b906001600160a01b038116908115610677576001600160a01b03831615610640576001600160a01b03831682146105ed576001600160a01b0383168210156105e65782905b6001600160a01b031680156105a157926000809160018060a01b0360045416925b60038082101561058f576100cf826108b4565b9054604051630b4c774160e11b8152600481018b90526001600160a01b038616602482015291831b1c62ffffff9081166044830152919060209081816064818b5afa9182156103ac57600092610551575b50506001600160a01b03166101585750506000198114610142576001016100bc565b634e487b7160e01b600052601160045260246000fd5b9350935062ffffff9495965061016e91506108b4565b9054911b1c165b16801561050c576040516323b872dd60e01b8152336004820152306024820152604435908160448201526020816064816000895af19081156103ac576000916104ed575b50156104b25760035460405163095ea7b360e01b81526001600160a01b039091166004820152602481018290526020816044816000895af19081156103ac57600091610493575b501561045d57610258420190814211610142576040519161010083019383851067ffffffffffffffff8611176104475760409485529583526001600160a01b03858116602085810191825285870198895230606087019081526080870194855260a08701958652600060c0880181815260e089018281526003549a5163414bf38960e01b81529951871660048b01529451861660248a01529a5162ffffff16604489015290518416606488015293516084870152935160a4860152965160c48501529551861660e4840152919490928592610104928492165af19182156103ac5760009261040e575b5060643582106103b85760405163a9059cbb60e01b81523360048201526024810183905290602090829060449082906000906001600160a01b03165af19081156103ac5760009161037d575b501561034657602090604051908152f35b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b61039f915060203d6020116103a5575b6103978183610866565b810190610908565b38610335565b503d61038d565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152602860248201527f4f75747075742066756e6473206c657373207468616e20746865206d696e696d604482015267756d2066756e647360c01b6064820152608490fd5b9091506020813d60201161043f575b8161042a60209383610866565b8101031261043a575190386102e9565b600080fd5b3d915061041d565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600e60248201526d105c1c1c9bdd994819985a5b195960921b6044820152606490fd5b6104ac915060203d6020116103a5576103978183610866565b38610200565b60405162461bcd60e51b8152602060048201526013602482015272151c985b9cd9995c919c9bdb4819985a5b1959606a1b6044820152606490fd5b610506915060203d6020116103a5576103978183610866565b386101b9565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420546f6b656e2053656e6420746f20737761700000000000006044820152606490fd5b90809250813d8311610588575b6105688183610866565b8101031261043a57516001600160a01b038116810361043a573880610120565b503d61055e565b505050905062ffffff91929350610175565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b918061009b565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b2102a37b5b2b7102160891b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420546f6b656e204160881b6044820152606490fd5b3461043a57608036600319011261043a576080810181811067ffffffffffffffff821117610447576040526106e1610888565b81526106eb61089e565b6020820190815260443591906001600160a01b0390818416840361043a576040830193845260643592828416840361043a57606081019384526004549360ff8560a01c1661082c57838080935116936bffffffffffffffffffffffff60a01b9485600154161760015551168360025416176002555116906003541617600355600160a01b925116906affffffffffffffffffffff60a81b161717600455600054680100000000000000009081811015610447578060016107ae92016000556108b4565b919080549260031b62ffffff93846101f4831b921b191617905560005481811015610447578060016107e392016000556108b4565b81549060031b9084610bb8831b921b1916179055600054908110156104475780600161081292016000556108b4565b819291549060031b91612710831b921b1916179055600080f35b60405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e48125b9a5d1a5b1a5e995960721b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff82111761044757604052565b600435906001600160a01b038216820361043a57565b602435906001600160a01b038216820361043a57565b906000548210156108f257600080526003600a8084047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630193060290565b634e487b7160e01b600052603260045260246000fd5b9081602091031261043a5751801515810361043a579056fea264697066735822122050cfe2a01d44ee661e2057c5f1fe455d711ea9a7ee2aab86fe033988c52ad6b364736f6c63430008120033";

type SwapRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter__factory extends ContractFactory {
  constructor(...args: SwapRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & {from?: PromiseOrValue<string>}): Promise<SwapRouter> {
    return super.deploy(overrides || {}) as Promise<SwapRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouter {
    return super.attach(address) as SwapRouter;
  }
  override connect(signer: Signer): SwapRouter__factory {
    return super.connect(signer) as SwapRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterInterface {
    return new utils.Interface(_abi) as SwapRouterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SwapRouter {
    return new Contract(address, _abi, signerOrProvider) as SwapRouter;
  }
}
