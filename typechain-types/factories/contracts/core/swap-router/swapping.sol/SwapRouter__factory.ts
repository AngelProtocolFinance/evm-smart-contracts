/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SwapRouter,
  SwapRouterInterface,
} from "../../../../../contracts/core/swap-router/swapping.sol/SwapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "curTokenin",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "curTokenout",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "curAmountin",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "curAmountout",
        type: "uint256",
      },
    ],
    name: "executeSwapOperations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "accountsContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "swapRouter",
            type: "address",
          },
        ],
        internalType: "struct SwapRouterMessages.InstantiateMsg",
        name: "curDetails",
        type: "tuple",
      },
    ],
    name: "intiSwapRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "swapEthToAnyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapEthToToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "curTokena",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "curAmountin",
        type: "uint256",
      },
    ],
    name: "swapTokenToUsdc",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657611598908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c80632435e368146106ce578063754773651461055757806375c9f3ac1461035c57806379470bc91461029e5763a470947a1461005757600080fd5b3461029a57608036600319011261029a5780516080810181811067ffffffffffffffff82111761028757825261008b610a87565b8152610095610a6c565b60208201908152604435906001600160a01b039283831683036102835784810192835260643590848216820361027f576060810191825286549560ff8760a01c1661023d575091847fffffffffffffffffffffff00000000000000000000000000000000000000000094928180740100000000000000000000000000000000000000009998965116937fffffffffffffffffffffffff000000000000000000000000000000000000000094856001541617600155511683600254161760025551169060035416176003555116911617178155815468010000000000000000908181101561022a5780600161018b92018555610a9d565b929080549360031b62ffffff94856101f4831b921b1916179055835482811015610217578060016101be92018655610a9d565b81549060031b9085610bb8831b921b191617905583549182101561020457508060016101ec92018455610a9d565b819291549060031b91612710831b921b191617905580f35b836041602492634e487b7160e01b835252fd5b602485604184634e487b7160e01b835252fd5b602484604185634e487b7160e01b835252fd5b5162461bcd60e51b8152602081890152601260248201527f416c726561647920496e6974696c697a656400000000000000000000000000006044820152606490fd5b8780fd5b8680fd5b602485604186634e487b7160e01b835252fd5b8280fd5b50903461029a578160031936011261029a576102b8610a87565b906001600160a01b0391848360015416803314801561034f575b6102db90611120565b85519384809263e68f909d60e01b82525afa91821561034557906103199392918660209793610320575b505033926103c06024359301511690610b12565b9051908152f35b61033d9293503d8091833e6103358183610a32565b81019061116b565b903880610305565b84513d87823e3d90fd5b50600254851633146102d2565b50829081600319360112610553576001600160a01b03838382600154168033148015610546575b61038c90611120565b610397341515611517565b84519283809263e68f909d60e01b82525afa90811561053957849161051f575b506103e081019482806103d76103c0828a51169501948286511690610e8d565b97511692511692610258420180421161050c57906104b0949392918651936103fe856109ff565b845262ffffff6020998a9687870152168785015233606085015260808401523460a08401528660c08401528660e08401526003541690855180958194829363414bf38960e01b8452830191909160e0610100820193816001600160a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b039134905af19283156105015780936104cc575b505051908152f35b909192508382813d83116104fa575b6104e58183610a32565b810103126104f75750519083806104c4565b80fd5b503d6104db565b8251903d90823e3d90fd5b602487601185634e487b7160e01b835252fd5b61053391503d8086833e6103358183610a32565b856103b7565b50505051903d90823e3d90fd5b5060025484163314610383565b5080fd5b5082906020928360031936011261029a57610570610a87565b9061057c341515611517565b6001600160a01b038185826001541686519283809263e68f909d60e01b82525afa9081156106c457906103e09187916106aa575b500192816105c18282875116610e8d565b94511693610258420191824211610697579162ffffff84926104b097958b97958a51976105ed896109ff565b88521687870152168785015233606085015260808401523460a08401528660c08401528660e08401526003541690855180958194829363414bf38960e01b8452830191909160e0610100820193816001600160a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b602488601187634e487b7160e01b835252fd5b6106be91503d8089833e6103358183610a32565b886105b0565b85513d88823e3d90fd5b5082346104f75760803660031901126104f75767ffffffffffffffff92803584811161029a573660238201121561029a57808201359461070d86610a54565b61071986519182610a32565b8681526020928382016024809960051b8301019136831161027f578901905b8282106109e05750505061074a610a6c565b6044359283116109dc57366023840112156109dc57828501359261076d84610a54565b9361077a89519586610a32565b808552898686019160051b830101913683116109d8578a879101915b8383106109c857505050508151918215610987578694855b60ff87168581101561081657806001600160a01b036107d06107e59387610af1565b5116866107de30938b610af1565b5191610b12565b8101809111610804579560ff80911690811461080457600101956107ae565b8a8960118a634e487b7160e01b835252fd5b5089888c8b8760643586106109205786855180927fa9059cbb00000000000000000000000000000000000000000000000000000000825281856001600160a01b038261087b8d338d8401602090939291936001600160a01b0360408201951681520152565b0393165af19182156109155780926108dd575b50501561089d57505051908152f35b600f9085606494519362461bcd60e51b85528401528201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b9091508682813d831161090e575b6108f58183610a32565b810103126104f7575061090790610b05565b868061088e565b503d6108eb565b8551903d90823e3d90fd5b6084846028858a89519362461bcd60e51b85528401528201527f4f75747075742066756e6473206c657373207468616e20746865206d696e696d60448201527f756d2066756e64730000000000000000000000000000000000000000000000006064820152fd5b60648660188b888c519362461bcd60e51b85528401528201527f496e76616c69642063616c6c546f6b656e206c656e67746800000000000000006044820152fd5b8235815291810191879101610796565b8880fd5b8580fd5b81356001600160a01b03811681036109d8578152908501908501610738565b610100810190811067ffffffffffffffff821117610a1c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a1c57604052565b67ffffffffffffffff8111610a1c5760051b60200190565b602435906001600160a01b0382168203610a8257565b600080fd5b600435906001600160a01b0382168203610a8257565b90600054821015610adb57600080526003600a8084047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630193060290565b634e487b7160e01b600052603260045260246000fd5b8051821015610adb5760209160051b010190565b51908115158203610a8257565b93929362ffffff610b238383610e8d565b16908115610e35576001600160a01b03809116906040948551947f23b872dd000000000000000000000000000000000000000000000000000000008652600498338a88015230602488015282604488015260209560009787816064818c8b5af1908115610db4578991610e00575b5015610dbe57838786600354168d610be98d5194859384937f095ea7b30000000000000000000000000000000000000000000000000000000085528401602090939291936001600160a01b0360408201951681520152565b03818c8b5af1908115610db4578991610d7f575b5015610d3d57610258420192834211610d2a5794899a9b9492819492828a9998610cd59d5199610c2c8b6109ff565b8a5216898901528c880152166060860152608085015260a08401528560c08401528560e0840152600354169085885180988195829463414bf38960e01b8452830191909160e0610100820193816001600160a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b03925af1938415610d1f57508193610cee575b50505090565b9091809350813d8311610d18575b610d068183610a32565b810103126104f7575051388080610ce8565b503d610cfc565b51913d9150823e3d90fd5b60248960118e634e487b7160e01b835252fd5b60648b888b519162461bcd60e51b8352820152600e60248201527f417070726f7665206661696c65640000000000000000000000000000000000006044820152fd5b90508781813d8311610dad575b610d968183610a32565b810103126109d857610da790610b05565b38610bfd565b503d610d8c565b8a513d8b823e3d90fd5b60648b888b519162461bcd60e51b8352820152601360248201527f5472616e7366657246726f6d206661696c6564000000000000000000000000006044820152fd5b90508781813d8311610e2e575b610e178183610a32565b810103126109d857610e2890610b05565b38610b91565b503d610e0d565b606460405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420546f6b656e2053656e6420746f20737761700000000000006044820152fd5b51906001600160a01b0382168203610a8257565b916001600160a01b03928381169081156110dc5784841680156110985780831461102e5785921015611028575b168015610fe4576000809460049481865416965b600380821015610fd857610ee182610a9d565b919062ffffff9283915490831b1c166040908151907f1698ee82000000000000000000000000000000000000000000000000000000008252898c83015287871660248301526044820152808c81606460209384935afa928315610fce575090879291600092610f96575b505016610f7a5750506000198114610f6557600101610ece565b601187634e487b7160e01b6000525260246000fd5b969850965092505050610f8d9150610a9d565b9054911b1c1690565b90809350813d8311610fc7575b610fad8183610a32565b810103126104f75750610fc08691610e79565b3880610f4b565b503d610fa3565b513d6000823e3d90fd5b50505050925050915090565b606460405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fd5b92610eba565b608460405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420546f6b656e204200000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420546f6b656e204100000000000000000000000000000000006044820152fd5b1561112757565b606460405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a656400000000000000000000000000000000000000006044820152fd5b6020908181840312610a8257805167ffffffffffffffff91828211610a82570190818403916104e08312610a82576040928351956104209182880188811086821117610a1c5786526111bc84610e79565b88526111c9878501610e79565b878901526111d8868501610e79565b868901526111e860608501610e79565b60608901526111f960808501610e79565b608089015261120a60a08501610e79565b60a089015261121b60c08501610e79565b60c089015261122c60e08501610e79565b60e089015261010061123f818601610e79565b90890152610120611251818601610e79565b90890152610140611263818601610e79565b90890152610160611275818601610e79565b90890152610180611287818601610e79565b908901526101a0611299818601610e79565b9089015260606101bf19820112610a82578551906060820182811087821117610a1c5787526101c0928386015183526101e092838701518a82015261020094858801518a8301528b0152610220926112f2848801610e79565b908b015261024093611305858801610e79565b908b015261026092611318848801610e79565b908b01526102809361132b858801610e79565b908b01526102a09283870151908b01526102c09361134a858801610e79565b908b01526102e09283870151888111610a82578701918a83820312610a82578951928b84018481108b821117610a1c578b528051908a8211610a8257019080601f83011215610a8257815161139e81610a54565b926113ab8d519485610a32565b8184528d8085019260051b820101928311610a82578d809101915b8383106114ff57505050908352508a01526103009260a091906113ea878601610e79565b908b015261031f190112610a8257855160a0810195861181871017610a1c57866104c0966114f898526114aa61032095611425878901610b05565b84526103409a6114368c8a01610b05565b9085015261036092838901519085015261038093611455858a01610b05565b60608201526103a095868a015160808301528d01526103c095611479878a01610e79565b908d01526103e09661148c888a01610e79565b908d01526104009a61149f8c8a01610e79565b908d01528701610e79565b908a01526114bb6104408601610e79565b908901526114cc6104608501610e79565b908801526114dd6104808401610e79565b908701526114ee6104a08301610e79565b9086015201610e79565b9082015290565b819061150a84610e79565b8152019101908d906113c6565b1561151e57565b606460405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420416d6f756e740000000000000000000000000000000000006044820152fdfea264697066735822122067ac225b0b445af9c4a2a57c76ca5e517ab1489077cbfad2d72932ffbbd31b7264736f6c63430008120033";

type SwapRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter__factory extends ContractFactory {
  constructor(...args: SwapRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouter> {
    return super.deploy(overrides || {}) as Promise<SwapRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouter {
    return super.attach(address) as SwapRouter;
  }
  override connect(signer: Signer): SwapRouter__factory {
    return super.connect(signer) as SwapRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterInterface {
    return new utils.Interface(_abi) as SwapRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouter {
    return new Contract(address, _abi, signerOrProvider) as SwapRouter;
  }
}
