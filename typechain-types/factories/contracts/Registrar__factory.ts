/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Registrar, RegistrarInterface } from "../../contracts/Registrar";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "chainName",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "accountsContractAddress",
        type: "string",
      },
    ],
    name: "AccountsContractStorageChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "protocolTaxRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolTaxBasis",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "protocolTaxCollector",
            type: "address",
          },
          {
            internalType: "address",
            name: "routerAddr",
            type: "address",
          },
          {
            internalType: "address",
            name: "refundAddr",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IRegistrar.AngelProtocolParams",
        name: "newAngelProtocolParams",
        type: "tuple",
      },
    ],
    name: "AngelProtocolParamsChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_gasFee",
        type: "uint256",
      },
    ],
    name: "GasFeeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "rebalanceLiquidProfits",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "lockedRebalanceToLiquid",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "interestDistribution",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "lockedPrincipleToLiquid",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "principleDistribution",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basis",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct IRegistrar.RebalanceParams",
        name: "newRebalanceParams",
        type: "tuple",
      },
    ],
    name: "RebalanceParamsChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "_strategyId",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "enum IRegistrar.StrategyApprovalState",
        name: "_approvalState",
        type: "uint8",
      },
    ],
    name: "StrategyApprovalChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "_strategyId",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_lockAddr",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_liqAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum IRegistrar.StrategyApprovalState",
        name: "_approvalState",
        type: "uint8",
      },
    ],
    name: "StrategyParamsChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isAccepted",
        type: "bool",
      },
    ],
    name: "TokenAcceptanceChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "angelProtocolParams",
    outputs: [
      {
        internalType: "uint32",
        name: "protocolTaxRate",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "protocolTaxBasis",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "protocolTaxCollector",
        type: "address",
      },
      {
        internalType: "address",
        name: "routerAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "refundAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "apGoldfinch",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "allowedSlippage",
            type: "uint256",
          },
        ],
        internalType: "struct APGoldfinchConfigLib.CRVParams",
        name: "crvParams",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPGoldfinchParams",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "allowedSlippage",
                type: "uint256",
              },
            ],
            internalType: "struct APGoldfinchConfigLib.CRVParams",
            name: "crvParams",
            type: "tuple",
          },
        ],
        internalType: "struct APGoldfinchConfigLib.APGoldfinchConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_targetChain",
        type: "string",
      },
    ],
    name: "getAccountsContractAddressByChain",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAngelProtocolParams",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "protocolTaxRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolTaxBasis",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "protocolTaxCollector",
            type: "address",
          },
          {
            internalType: "address",
            name: "routerAddr",
            type: "address",
          },
          {
            internalType: "address",
            name: "refundAddr",
            type: "address",
          },
        ],
        internalType: "struct IRegistrar.AngelProtocolParams",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
    ],
    name: "getGasByToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRebalanceParams",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "rebalanceLiquidProfits",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "lockedRebalanceToLiquid",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "interestDistribution",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "lockedPrincipleToLiquid",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "principleDistribution",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basis",
            type: "uint32",
          },
        ],
        internalType: "struct IRegistrar.RebalanceParams",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_strategyId",
        type: "bytes4",
      },
    ],
    name: "getStrategyApprovalState",
    outputs: [
      {
        internalType: "enum IRegistrar.StrategyApprovalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_strategyId",
        type: "bytes4",
      },
    ],
    name: "getStrategyParamsById",
    outputs: [
      {
        components: [
          {
            internalType: "enum IRegistrar.StrategyApprovalState",
            name: "approvalState",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "enum IVault.VaultType",
                name: "Type",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "vaultAddr",
                type: "address",
              },
            ],
            internalType: "struct IRegistrar.VaultParams",
            name: "Locked",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum IVault.VaultType",
                name: "Type",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "vaultAddr",
                type: "address",
              },
            ],
            internalType: "struct IRegistrar.VaultParams",
            name: "Liquid",
            type: "tuple",
          },
        ],
        internalType: "struct IRegistrar.StrategyParams",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
    ],
    name: "isTokenAccepted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rebalanceParams",
    outputs: [
      {
        internalType: "bool",
        name: "rebalanceLiquidProfits",
        type: "bool",
      },
      {
        internalType: "uint32",
        name: "lockedRebalanceToLiquid",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "interestDistribution",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "lockedPrincipleToLiquid",
        type: "bool",
      },
      {
        internalType: "uint32",
        name: "principleDistribution",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "basis",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "allowedSlippage",
                type: "uint256",
              },
            ],
            internalType: "struct APGoldfinchConfigLib.CRVParams",
            name: "crvParams",
            type: "tuple",
          },
        ],
        internalType: "struct APGoldfinchConfigLib.APGoldfinchConfig",
        name: "_apGoldfinch",
        type: "tuple",
      },
    ],
    name: "setAPGoldfinchParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_chainName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_accountsContractAddress",
        type: "string",
      },
    ],
    name: "setAccountsContractAddressByChain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "protocolTaxRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolTaxBasis",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "protocolTaxCollector",
            type: "address",
          },
          {
            internalType: "address",
            name: "routerAddr",
            type: "address",
          },
          {
            internalType: "address",
            name: "refundAddr",
            type: "address",
          },
        ],
        internalType: "struct IRegistrar.AngelProtocolParams",
        name: "_angelProtocolParams",
        type: "tuple",
      },
    ],
    name: "setAngelProtocolParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_gasFee",
        type: "uint256",
      },
    ],
    name: "setGasByToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "rebalanceLiquidProfits",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "lockedRebalanceToLiquid",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "interestDistribution",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "lockedPrincipleToLiquid",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "principleDistribution",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basis",
            type: "uint32",
          },
        ],
        internalType: "struct IRegistrar.RebalanceParams",
        name: "_rebalanceParams",
        type: "tuple",
      },
    ],
    name: "setRebalanceParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_strategyId",
        type: "bytes4",
      },
      {
        internalType: "enum IRegistrar.StrategyApprovalState",
        name: "_approvalState",
        type: "uint8",
      },
    ],
    name: "setStrategyApprovalState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_strategyId",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "_lockAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_liqAddr",
        type: "address",
      },
      {
        internalType: "enum IRegistrar.StrategyApprovalState",
        name: "_approvalState",
        type: "uint8",
      },
    ],
    name: "setStrategyParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isAccepted",
        type: "bool",
      },
    ],
    name: "setTokenAccepted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761151b908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081630560bd961461117f575080630dcfe5fa1461112a578063296b5cc814610f645780632e36091414610e1c57806338f2e95c14610db957806342b8c5e914610ce35780634349597a14610c655780634df988ae14610c235780636f2da65714610bbc578063715018a614610b5457806372b1df2914610b3a5780637d25177614610a105780638129fc1c146107b75780638da5cb5b1461078f578063afd44bcc14610758578063b7644fd914610700578063b8efa48e1461064e578063bb392002146105d0578063c1492439146103fa578063c5ec133a146103ce578063e5bde02914610299578063edbcc599146101cb5763f2fde38b1461012057600080fd5b346101c75760203660031901126101c7576101396111b9565b91610142611339565b6001600160a01b0383161561015e578361015b84611391565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461029557816003193601126102955760c09160a082516101ed816112df565b828152826020820152828482015282606082015282608082015201528051610214816112df565b60655460ff8116151592838352602083019263ffffffff938492838560081c16825283818401818760281c16815281606086019460ff8960481c16151586528160a06080890198828c60501c168a52019960701c16895284519a8b52511660208a0152511690870152511515606086015251166080840152511660a0820152f35b5080fd5b5091346103cb576020928360031936011261029557803567ffffffffffffffff81116101c7576102d6916102cf91369101611247565b36916113e6565b838151910120815260698352818120908383518093839080546102f88161142d565b808552916001918083169081156103a8575060011461036b575b5050506103259250959392950382611317565b82519382859384528251928382860152825b84811061035557505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610337565b86528486209492508591905b8183106103905750889450508201016103253880610312565b85548884018501529485019487945091830191610377565b9250505061032594925060ff191682840152151560051b82010186923880610312565b80fd5b50503461029557816003193601126102955780516020916103ee82611275565b606d5480925251908152f35b5091903461029557806003193601126102955767ffffffffffffffff83358181116105cc5761042c9036908601611247565b6024929192358281116105c8576104469036908801611247565b939092610451611339565b61045c3684846113e6565b9788516020809a01208852606989528688209186116105b55750610480815461142d565b601f8111610572575b5086601f861160011461050d57879850948096979581959691610502575b508460011b906000198660031b1c19161790555b81865192839283378101878152039020935192839283378101848152039020907fbe341763477f316002d91bd656ce6600451213c169ee5883903f4f60426ff6df8380a380f35b9050850135386104a7565b81885288882090601f198716895b81811061055b57508798999a509680969710610541575b5050600184811b0190556104bb565b860135600019600387901b60f8161c191690553880610532565b91928b60018192868b01358155019401920161051b565b818852888820601f870160051c8101918a88106105ab575b601f0160051c01905b8181106105a05750610489565b888155600101610593565b909150819061058a565b876041602492634e487b7160e01b835252fd5b8580fd5b8380fd5b50346101c757816003193601126101c7576105e96111ea565b602435918210156105cc577fc29dfab8aee1ae5a857c884f518353e5f8a0d8e0649c8708f6b21bc92f4209ca9161064a6001600160e01b031960209361062d611339565b1694858752606a8452610642838289206114cd565b518092611201565ba280f35b50503461029557816003193601126102955760a09160808251610670816112fb565b828152826020820152828482015282606082015201528051610691816112fb565b6066549063ffffffff808316938483526020830190828560201c168252808401946001600160a01b03958694858093851c168252826067541694606088019586526080846068541698019788528451998a52511660208901525116908601525116606084015251166080820152f35b50503461029557816003193601126102955760a090606654906001600160a01b039081606754169082606854169281519463ffffffff80821687528160201c166020870152821c169084015260608301526080820152f35b50503461029557602036600319011261029557806020926001600160a01b0361077f6111b9565b168152606c845220549051908152f35b5050346102955781600319360112610295576020906001600160a01b03603354169051908152f35b50346101c757826003193601126101c75782549060ff8260081c161591828093610a03575b80156109ec575b156109835760ff198116600117855582610972575b5060ff845460081c1615610909575061081033611391565b606460a0835161081f816112df565b858152604b602082015260148582015285606082015285608082015201526e640000000000000000140000004b0071ffffffffffffffffffffffffffffffffffff1960655416176065558260808351610877816112fb565b6002815260646020820152828582015282606082015201526464000000026001600160e01b0319606654161760665573ffffffffffffffffffffffffffffffffffffffff198060675416606755606854166068556108d3575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b608490602084519162461bcd60e51b8352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b61ffff1916610101178455386107f8565b608482602086519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156107e35750600160ff8216146107e3565b50600160ff8216106107dc565b50346101c75760a03660031901126101c757610a2a611339565b359063ffffffff918281168091036105cc57606654610a476114a7565b6001600160a01b0391906044358381168103610b3657846001600160e01b03197bffffffffffffffffffffffffffffffffffffffff000000000000000067ffffffff0000000093891b169416179160201b1617176066556064358181168091036105c85773ffffffffffffffffffffffffffffffffffffffff19938185606754161760675560843592808416809403610b36577f386dbf58efc832f07658bc89d0b1552d3a11a7cc20e3953cf7bd8796ccc1f896968460a09760685416176068558251958652610b156114ba565b166020860152610b236111d4565b169084015260608301526080820152a180f35b8780fd5b8382346102955760203660031901126102955735606d5580f35b83346103cb57806003193601126103cb57610b6d611339565b806001600160a01b0360335473ffffffffffffffffffffffffffffffffffffffff198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102955780600319360112610295577f0fc88453320e48dee70566020e32b04f9c148fdf565be3b7d7d9c2838a06d7336020610bf96111b9565b6001600160a01b0360243591610c0d611339565b1693848652606c8352818187205551908152a280f35b50503461029557602036600319011261029557610c6360ff826020946001600160e01b0319610c506111ea565b168152606a865220541691518092611201565bf35b505034610295578060031936011261029557610c7f6111b9565b602435908115158092036105cc577f1527477b814a609b77a3a52f49fae682370acb615a0212d9e5229186cd66e94d916001600160a01b03602092610cc2611339565b1693848652606b835280862060ff1981541660ff841617905551908152a280f35b50503461029557602090816003193601126101c75780610dae610c639260a0956001600160e01b0319610d146111ea565b8351610d1f816112c3565b8381528451610d2d816112a7565b848152848a8201528982015284805191610d46836112a7565b858352858b8401520152168152606a86522093825194610d65866112c3565b610d7360ff82541687611467565b610da4610d946002610d8760018501611473565b93858a0194855201611473565b9480880195865251809751611201565b5190850190611224565b516060830190611224565b50503461029557816003193601126102955760c0906065549080519160ff81161515835263ffffffff91828260081c166020850152828260281c169084015260ff8160481c1615156060840152818160501c16608084015260701c1660a0820152f35b50346101c75760c03660031901126101c757610e36611339565b35908115158092036101c7576065549164ffffffff00610e546114a7565b60081b16926044359363ffffffff93848616808703610b365760643591821515809303610f60576084359680881694858903610f5c5760a43598828a1697888b03610f58577f9ba2671e8e8451ccaa99b5ba3b232e5a1b174450f12aa494675d0941fa4c17f99b68ffffffff00000000008b946dffffffff000000000000000000009371ffffffffffffffffffffffffffffffffffff1960c09f71ffffffff000000000000000000000000000060ff9160701b169816911617179160281b161769ff0000000000000000008860481b16179160501b1617176065558151968752610f3c6114ba565b1660208701528501526060840152608083015260a0820152a180f35b8c80fd5b8a80fd5b8880fd5b5090346101c75760803660031901126101c757610f7f6111ea565b602435916001600160a01b03908184168094036105c857610f9e6111d4565b906064359186831015610b3657610fb3611339565b815196610fbf886112a7565b88885260209487868a0152835192610fd6846112a7565b60018452169788868401526001600160e01b0319845197610ff6896112c3565b611000878a611467565b8789019283528589019485521696878b52606a8752848b209051838110156111175761102c90826114cd565b60018101915191825160028110156111045791818994936002935474ffffffffffffffffffffffffffffffffffffffff00968796015160ff7fffffffffffffffffffffff00000000000000000000000000000000000000000097889260081b1693169116171790550193519182519360028510156110f1575091879695939160ff86947ffa06e62a5e92c6354ccefe5daec331c8025e54e73ab99084cc91cb5dca242f2a9a6110ed985494015160081b169316911617179055518092611201565ba480f35b8c6021602492634e487b7160e01b835252fd5b60248d602187634e487b7160e01b835252fd5b60248c602186634e487b7160e01b835252fd5b505034610295578160031936011261029557602091815161114a81611275565b82519161115683611275565b82525280519061116582611275565b8051809261117282611275565b606d548252525190518152f35b849084346101c75760203660031901126101c75760ff906020936001600160a01b036111a96111b9565b168152606b855220541615158152f35b600435906001600160a01b03821682036111cf57565b600080fd5b604435906001600160a01b03821682036111cf57565b600435906001600160e01b0319821682036111cf57565b90600482101561120e5752565b634e487b7160e01b600052602160045260246000fd5b805190600282101561120e5760206001600160a01b039181938552015116910152565b9181601f840112156111cf5782359167ffffffffffffffff83116111cf57602083818601950101116111cf57565b6020810190811067ffffffffffffffff82111761129157604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761129157604052565b6060810190811067ffffffffffffffff82111761129157604052565b60c0810190811067ffffffffffffffff82111761129157604052565b60a0810190811067ffffffffffffffff82111761129157604052565b90601f8019910116810190811067ffffffffffffffff82111761129157604052565b6001600160a01b0360335416330361134d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b92919267ffffffffffffffff82116112915760405191611410601f8201601f191660200184611317565b8294818452818301116111cf578281602093846000960137010152565b90600182811c9216801561145d575b602083101461144757565b634e487b7160e01b600052602260045260246000fd5b91607f169161143c565b600482101561120e5752565b90604051611480816112a7565b80925460ff8116600281101561120e576020916001600160a01b0391845260081c16910152565b60243563ffffffff811681036111cf5790565b6024359063ffffffff821682036111cf57565b90600481101561120e5760ff8019835416911617905556fea26469706673582212202f3b4e440e4b348133fa76b5ce8fe3c6820d39660bd4b84e5dfc9b8a0947430e64736f6c63430008120033";

type RegistrarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistrarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registrar__factory extends ContractFactory {
  constructor(...args: RegistrarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Registrar> {
    return super.deploy(overrides || {}) as Promise<Registrar>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Registrar {
    return super.attach(address) as Registrar;
  }
  override connect(signer: Signer): Registrar__factory {
    return super.connect(signer) as Registrar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistrarInterface {
    return new utils.Interface(_abi) as RegistrarInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registrar {
    return new Contract(address, _abi, signerOrProvider) as Registrar;
  }
}
