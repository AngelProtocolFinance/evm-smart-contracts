/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockUSDC,
  MockUSDCInterface,
} from "../../../contracts/mock/MockUSDC";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "curName",
        type: "string",
      },
      {
        internalType: "string",
        name: "curSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x604060808152346200043d57620012ac803803806200001e8162000442565b92833981016060828203126200043d5781516001600160401b0392908381116200043d57826200005091830162000468565b92602092838301518281116200043d5786916200006f91850162000468565b920151938051918083116200033d5760038054936001938486811c9616801562000432575b888710146200041c578190601f96878111620003c6575b5088908783116001146200035f5760009262000353575b505060001982841b1c191690841b1781555b84519182116200033d5760049485548481811c9116801562000332575b888210146200031d57858111620002d2575b50869085841160011462000267579383949184926000956200025b575b50501b92600019911b1c19161782555b60058054336001600160a01b03198216811790925586519291906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3620f424094858102958187041490151715620002465733156200020957505060025490838201809211620001f457506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a351610dd19081620004db8239f35b601190634e487b7160e01b6000525260246000fd5b8360649362461bcd60e51b845283015260248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b601183634e487b7160e01b6000525260246000fd5b01519350388062000120565b9190601f198416928760005284896000209460005b8b89838310620002ba57505050106200029f575b50505050811b01825562000130565b01519060f884600019921b161c191690553880808062000290565b8686015189559097019694850194889350016200027c565b86600052876000208680860160051c8201928a871062000313575b0160051c019085905b8281106200030657505062000103565b60008155018590620002f6565b92508192620002ed565b602287634e487b7160e01b6000525260246000fd5b90607f1690620000f1565b634e487b7160e01b600052604160045260246000fd5b015190503880620000c2565b90869350601f19831691856000528a6000209260005b8c828210620003af575050841162000396575b505050811b018155620000d4565b015160001983861b60f8161c1916905538808062000388565b8385015186558a9790950194938401930162000375565b90915083600052886000208780850160051c8201928b861062000412575b918891869594930160051c01915b82811062000402575050620000ab565b60008155859450889101620003f2565b92508192620003e4565b634e487b7160e01b600052602260045260246000fd5b95607f169562000094565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200033d57604052565b919080601f840112156200043d5782516001600160401b0381116200033d576020906200049e601f8201601f1916830162000442565b928184528282870101116200043d5760005b818110620004c657508260009394955001015290565b8581018301518482018401528201620004b056fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde03146106f557508063095ea7b3146106cb57806318160ddd146106ac57806323b872dd1461066f578063313ce56714610653578063395093511461060457806340c10f191461053e57806342966c681461052057806370a08231146104ea578063715018a61461048257806379cc67901461044f5780638da5cb5b1461042757806395d89b4114610307578063a457c2d714610247578063a9059cbb14610216578063dd62ed3e146101c95763f2fde38b146100de57600080fd5b346101c55760203660031901126101c5576100f7610833565b90610100610864565b6001600160a01b0380921692831561015c5750506005548273ffffffffffffffffffffffffffffffffffffffff19821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b505034610212578060031936011261021257806020926101e7610833565b6101ef61084e565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b505034610212578060031936011261021257602090610240610236610833565b60243590336108df565b5160018152f35b508234610304578260031936011261030457610261610833565b91836024359233815260016020528181206001600160a01b038616825260205220549082821061029b576020856102408585038733610a93565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b50919034610212578160031936011261021257805190828454600181811c9080831692831561041d575b602093848410811461040a578388529081156103ee5750600114610399575b505050829003601f01601f191682019267ffffffffffffffff84118385101761038657508291826103829252826107ea565b0390f35b80604186634e487b7160e01b6024945252fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106103da5750505050830101388080610350565b8054888601830152930192849082016103c4565b60ff1916878501525050151560051b8401019050388080610350565b60248960228c634e487b7160e01b835252fd5b91607f1691610331565b5050346102125781600319360112610212576020906001600160a01b03600554169051908152f35b505034610212573660031901126103045761047f61046b610833565b6024359061047a823383610bc7565b610c5f565b80f35b833461030457806003193601126103045761049b610864565b806001600160a01b0360055473ffffffffffffffffffffffffffffffffffffffff198116600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461021257602036600319011261021257806020926001600160a01b03610511610833565b16815280845220549051908152f35b8382346102125760203660031901126102125761047f903533610c5f565b5090346101c557806003193601126101c557610558610833565b906001600160a01b036024359261056d610864565b169283156105c257506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926105a887956002546108bc565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b50503461021257806003193601126102125761024060209261064c610627610833565b91338152600186528481206001600160a01b03841682528652846024359120546108bc565b9033610a93565b5050346102125781600319360112610212576020905160068152f35b50503461021257606036600319011261021257602090610240610690610833565b61069861084e565b604435916106a7833383610bc7565b6108df565b5050346102125781600319360112610212576020906002549051908152f35b5050346102125780600319360112610212576020906102406106eb610833565b6024359033610a93565b84915083346101c557826003193601126101c55782600354600181811c908083169283156107e0575b602093848410811461040a578388529081156107c4575060011461076e57505050829003601f01601f191682019267ffffffffffffffff84118385101761038657508291826103829252826107ea565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107b05750505050830101858080610350565b80548886018301529301928490820161079a565b60ff1916878501525050151560051b8401019050858080610350565b91607f169161071e565b6020808252825181830181905290939260005b82811061081f57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016107fd565b600435906001600160a01b038216820361084957565b600080fd5b602435906001600160a01b038216820361084957565b6001600160a01b0360055416330361087857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b919082018092116108c957565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03809116918215610a2957169182156109bf5760008281528060205260408120549180831061095557604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b608460405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b03809116918215610b5e5716918215610af45760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b906001600160a01b0380831660005260016020526040600020908216600052602052604060002054926000198403610c00575b50505050565b808410610c1b57610c12930391610a93565b38808080610bfa565b606460405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b6001600160a01b03168015610d3157600091818352826020526040832054818110610cc757817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fdfea26469706673582212208454f984d84119ad30b7df9fc51283910192566e8dc429002e935b6bbb3f8b7b64736f6c63430008120033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    curName: PromiseOrValue<string>,
    curSymbol: PromiseOrValue<string>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUSDC> {
    return super.deploy(
      curName,
      curSymbol,
      supply,
      overrides || {}
    ) as Promise<MockUSDC>;
  }
  override getDeployTransaction(
    curName: PromiseOrValue<string>,
    curSymbol: PromiseOrValue<string>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      curName,
      curSymbol,
      supply,
      overrides || {}
    );
  }
  override attach(address: string): MockUSDC {
    return super.attach(address) as MockUSDC;
  }
  override connect(signer: Signer): MockUSDC__factory {
    return super.connect(signer) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new utils.Interface(_abi) as MockUSDCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUSDC {
    return new Contract(address, _abi, signerOrProvider) as MockUSDC;
  }
}
