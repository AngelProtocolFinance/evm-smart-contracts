/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IRegistrar {
  export type AngelProtocolParamsStruct = {
    protocolTaxRate: PromiseOrValue<BigNumberish>;
    protocolTaxBasis: PromiseOrValue<BigNumberish>;
  };

  export type AngelProtocolParamsStructOutput = [number, number] & {
    protocolTaxRate: number;
    protocolTaxBasis: number;
  };

  export type RebalanceParamsStruct = {
    rebalanceLiquidProfits: PromiseOrValue<boolean>;
    lockedRebalanceToLiquid: PromiseOrValue<boolean>;
    interestDistribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principleDistribution: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceParamsStructOutput = [
    boolean,
    boolean,
    number,
    boolean,
    number
  ] & {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: boolean;
    interestDistribution: number;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: number;
  };

  export type SplitDetailsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
    nominal: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [number, number, number] & {
    min: number;
    max: number;
    nominal: number;
  };
}

export interface IRegistrarInterface extends utils.Interface {
  functions: {
    "getAngelProtocolParams()": FunctionFragment;
    "getRebalanceParams()": FunctionFragment;
    "getSplitDetails()": FunctionFragment;
    "setAngelProtocolParams((uint32,uint32))": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setRebalanceParams((bool,bool,uint32,bool,uint32))": FunctionFragment;
    "setSplitDetails((uint32,uint32,uint32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAngelProtocolParams"
      | "getRebalanceParams"
      | "getSplitDetails"
      | "setAngelProtocolParams"
      | "setKeeper"
      | "setRebalanceParams"
      | "setSplitDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAngelProtocolParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRebalanceParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAngelProtocolParams",
    values: [IRegistrar.AngelProtocolParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceParams",
    values: [IRegistrar.RebalanceParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplitDetails",
    values: [IRegistrar.SplitDetailsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAngelProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebalanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSplitDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAngelProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSplitDetails",
    data: BytesLike
  ): Result;

  events: {
    "AngelProtocolParamsChanged(tuple)": EventFragment;
    "RebalanceParamsChanged(tuple)": EventFragment;
    "SplitDetailsChanged(tuple)": EventFragment;
    "StrategyApprovalChanged(bytes4,address,address,bool)": EventFragment;
    "TokenAcceptanceChanged(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AngelProtocolParamsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceParamsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitDetailsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyApprovalChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAcceptanceChanged"): EventFragment;
}

export interface AngelProtocolParamsChangedEventObject {
  newAngelProtocolParams: IRegistrar.AngelProtocolParamsStructOutput;
}
export type AngelProtocolParamsChangedEvent = TypedEvent<
  [IRegistrar.AngelProtocolParamsStructOutput],
  AngelProtocolParamsChangedEventObject
>;

export type AngelProtocolParamsChangedEventFilter =
  TypedEventFilter<AngelProtocolParamsChangedEvent>;

export interface RebalanceParamsChangedEventObject {
  newRebalanceParams: IRegistrar.RebalanceParamsStructOutput;
}
export type RebalanceParamsChangedEvent = TypedEvent<
  [IRegistrar.RebalanceParamsStructOutput],
  RebalanceParamsChangedEventObject
>;

export type RebalanceParamsChangedEventFilter =
  TypedEventFilter<RebalanceParamsChangedEvent>;

export interface SplitDetailsChangedEventObject {
  newSplitDetails: IRegistrar.SplitDetailsStructOutput;
}
export type SplitDetailsChangedEvent = TypedEvent<
  [IRegistrar.SplitDetailsStructOutput],
  SplitDetailsChangedEventObject
>;

export type SplitDetailsChangedEventFilter =
  TypedEventFilter<SplitDetailsChangedEvent>;

export interface StrategyApprovalChangedEventObject {
  _selector: string;
  _liqAddr: string;
  _lockAddr: string;
  _isApproved: boolean;
}
export type StrategyApprovalChangedEvent = TypedEvent<
  [string, string, string, boolean],
  StrategyApprovalChangedEventObject
>;

export type StrategyApprovalChangedEventFilter =
  TypedEventFilter<StrategyApprovalChangedEvent>;

export interface TokenAcceptanceChangedEventObject {
  tokenAddr: string;
  isAccepted: boolean;
}
export type TokenAcceptanceChangedEvent = TypedEvent<
  [string, boolean],
  TokenAcceptanceChangedEventObject
>;

export type TokenAcceptanceChangedEventFilter =
  TypedEventFilter<TokenAcceptanceChangedEvent>;

export interface IRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<[IRegistrar.AngelProtocolParamsStructOutput]>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<[IRegistrar.RebalanceParamsStructOutput]>;

    getSplitDetails(
      overrides?: CallOverrides
    ): Promise<[IRegistrar.SplitDetailsStructOutput]>;

    setAngelProtocolParams(
      _angelProtocolParams: IRegistrar.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebalanceParams(
      _rebalanceParams: IRegistrar.RebalanceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSplitDetails(
      _splitDetails: IRegistrar.SplitDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAngelProtocolParams(
    overrides?: CallOverrides
  ): Promise<IRegistrar.AngelProtocolParamsStructOutput>;

  getRebalanceParams(
    overrides?: CallOverrides
  ): Promise<IRegistrar.RebalanceParamsStructOutput>;

  getSplitDetails(
    overrides?: CallOverrides
  ): Promise<IRegistrar.SplitDetailsStructOutput>;

  setAngelProtocolParams(
    _angelProtocolParams: IRegistrar.AngelProtocolParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebalanceParams(
    _rebalanceParams: IRegistrar.RebalanceParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSplitDetails(
    _splitDetails: IRegistrar.SplitDetailsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<IRegistrar.AngelProtocolParamsStructOutput>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<IRegistrar.RebalanceParamsStructOutput>;

    getSplitDetails(
      overrides?: CallOverrides
    ): Promise<IRegistrar.SplitDetailsStructOutput>;

    setAngelProtocolParams(
      _angelProtocolParams: IRegistrar.AngelProtocolParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceParams(
      _rebalanceParams: IRegistrar.RebalanceParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setSplitDetails(
      _splitDetails: IRegistrar.SplitDetailsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AngelProtocolParamsChanged(tuple)"(
      newAngelProtocolParams?: null
    ): AngelProtocolParamsChangedEventFilter;
    AngelProtocolParamsChanged(
      newAngelProtocolParams?: null
    ): AngelProtocolParamsChangedEventFilter;

    "RebalanceParamsChanged(tuple)"(
      newRebalanceParams?: null
    ): RebalanceParamsChangedEventFilter;
    RebalanceParamsChanged(
      newRebalanceParams?: null
    ): RebalanceParamsChangedEventFilter;

    "SplitDetailsChanged(tuple)"(
      newSplitDetails?: null
    ): SplitDetailsChangedEventFilter;
    SplitDetailsChanged(newSplitDetails?: null): SplitDetailsChangedEventFilter;

    "StrategyApprovalChanged(bytes4,address,address,bool)"(
      _selector?: null,
      _liqAddr?: null,
      _lockAddr?: null,
      _isApproved?: null
    ): StrategyApprovalChangedEventFilter;
    StrategyApprovalChanged(
      _selector?: null,
      _liqAddr?: null,
      _lockAddr?: null,
      _isApproved?: null
    ): StrategyApprovalChangedEventFilter;

    "TokenAcceptanceChanged(address,bool)"(
      tokenAddr?: null,
      isAccepted?: null
    ): TokenAcceptanceChangedEventFilter;
    TokenAcceptanceChanged(
      tokenAddr?: null,
      isAccepted?: null
    ): TokenAcceptanceChangedEventFilter;
  };

  estimateGas: {
    getAngelProtocolParams(overrides?: CallOverrides): Promise<BigNumber>;

    getRebalanceParams(overrides?: CallOverrides): Promise<BigNumber>;

    getSplitDetails(overrides?: CallOverrides): Promise<BigNumber>;

    setAngelProtocolParams(
      _angelProtocolParams: IRegistrar.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebalanceParams(
      _rebalanceParams: IRegistrar.RebalanceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSplitDetails(
      _splitDetails: IRegistrar.SplitDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSplitDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAngelProtocolParams(
      _angelProtocolParams: IRegistrar.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceParams(
      _rebalanceParams: IRegistrar.RebalanceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSplitDetails(
      _splitDetails: IRegistrar.SplitDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
