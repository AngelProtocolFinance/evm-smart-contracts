/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace AngelCoreStruct {
  export type YieldVaultStruct = {
    addr: PromiseOrValue<string>;
    network: PromiseOrValue<BigNumberish>;
    inputDenom: PromiseOrValue<string>;
    yieldToken: PromiseOrValue<string>;
    approved: PromiseOrValue<boolean>;
    restrictedFrom: PromiseOrValue<BigNumberish>[];
    acctType: PromiseOrValue<BigNumberish>;
    vaultType: PromiseOrValue<BigNumberish>;
  };

  export type YieldVaultStructOutput = [
    string,
    BigNumber,
    string,
    string,
    boolean,
    number[],
    number,
    number
  ] & {
    addr: string;
    network: BigNumber;
    inputDenom: string;
    yieldToken: string;
    approved: boolean;
    restrictedFrom: number[];
    acctType: number;
    vaultType: number;
  };

  export type NetworkInfoStruct = {
    name: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    router: PromiseOrValue<string>;
    axelerGateway: PromiseOrValue<string>;
    ibcChannel: PromiseOrValue<string>;
    transferChannel: PromiseOrValue<string>;
    gasReceiver: PromiseOrValue<string>;
    gasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NetworkInfoStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    name: string;
    chainId: BigNumber;
    router: string;
    axelerGateway: string;
    ibcChannel: string;
    transferChannel: string;
    gasReceiver: string;
    gasLimit: BigNumber;
  };

  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };

  export type AcceptedTokensStruct = { cw20: PromiseOrValue<string>[] };

  export type AcceptedTokensStructOutput = [string[]] & { cw20: string[] };

  export type RebalanceDetailsStruct = {
    rebalanceLiquidInvestedProfits: PromiseOrValue<boolean>;
    lockedInterestsToLiquid: PromiseOrValue<boolean>;
    interest_distribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principle_distribution: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceDetailsStructOutput = [
    boolean,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    rebalanceLiquidInvestedProfits: boolean;
    lockedInterestsToLiquid: boolean;
    interest_distribution: BigNumber;
    lockedPrincipleToLiquid: boolean;
    principle_distribution: BigNumber;
  };
}

export declare namespace RegistrarStorage {
  export type ConfigStruct = {
    owner: PromiseOrValue<string>;
    applicationsReview: PromiseOrValue<string>;
    indexFundContract: PromiseOrValue<string>;
    accountsContract: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    subdaoGovCode: PromiseOrValue<string>;
    subdaoCw20TokenCode: PromiseOrValue<string>;
    subdaoBondingTokenCode: PromiseOrValue<string>;
    subdaoCw900Code: PromiseOrValue<string>;
    subdaoDistributorCode: PromiseOrValue<string>;
    subdaoEmitter: PromiseOrValue<string>;
    donationMatchCode: PromiseOrValue<string>;
    donationMatchCharitesContract: PromiseOrValue<string>;
    donationMatchEmitter: PromiseOrValue<string>;
    splitToLiquid: AngelCoreStruct.SplitDetailsStruct;
    haloToken: PromiseOrValue<string>;
    haloTokenLpContract: PromiseOrValue<string>;
    govContract: PromiseOrValue<string>;
    collectorAddr: PromiseOrValue<string>;
    collectorShare: PromiseOrValue<BigNumberish>;
    charitySharesContract: PromiseOrValue<string>;
    acceptedTokens: AngelCoreStruct.AcceptedTokensStruct;
    fundraisingContract: PromiseOrValue<string>;
    rebalance: AngelCoreStruct.RebalanceDetailsStruct;
    swapsRouter: PromiseOrValue<string>;
    multisigFactory: PromiseOrValue<string>;
    multisigEmitter: PromiseOrValue<string>;
    charityProposal: PromiseOrValue<string>;
    lockedWithdrawal: PromiseOrValue<string>;
    proxyAdmin: PromiseOrValue<string>;
    usdcAddress: PromiseOrValue<string>;
    wethAddress: PromiseOrValue<string>;
    cw900lvAddress: PromiseOrValue<string>;
  };

  export type ConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    AngelCoreStruct.SplitDetailsStructOutput,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    AngelCoreStruct.AcceptedTokensStructOutput,
    string,
    AngelCoreStruct.RebalanceDetailsStructOutput,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    owner: string;
    applicationsReview: string;
    indexFundContract: string;
    accountsContract: string;
    treasury: string;
    subdaoGovCode: string;
    subdaoCw20TokenCode: string;
    subdaoBondingTokenCode: string;
    subdaoCw900Code: string;
    subdaoDistributorCode: string;
    subdaoEmitter: string;
    donationMatchCode: string;
    donationMatchCharitesContract: string;
    donationMatchEmitter: string;
    splitToLiquid: AngelCoreStruct.SplitDetailsStructOutput;
    haloToken: string;
    haloTokenLpContract: string;
    govContract: string;
    collectorAddr: string;
    collectorShare: BigNumber;
    charitySharesContract: string;
    acceptedTokens: AngelCoreStruct.AcceptedTokensStructOutput;
    fundraisingContract: string;
    rebalance: AngelCoreStruct.RebalanceDetailsStructOutput;
    swapsRouter: string;
    multisigFactory: string;
    multisigEmitter: string;
    charityProposal: string;
    lockedWithdrawal: string;
    proxyAdmin: string;
    usdcAddress: string;
    wethAddress: string;
    cw900lvAddress: string;
  };
}

export declare namespace RegistrarMessages {
  export type UpdateFeeRequestStruct = {
    keys: PromiseOrValue<string>[];
    values: PromiseOrValue<BigNumberish>[];
  };

  export type UpdateFeeRequestStructOutput = [string[], BigNumber[]] & {
    keys: string[];
    values: BigNumber[];
  };
}

export interface RegistrarEventsLibInterface extends utils.Interface {
  functions: {};

  events: {
    "AddVault(string,tuple)": EventFragment;
    "DeleteNetworkConnection(uint256)": EventFragment;
    "PostNetworkConnection(uint256,tuple)": EventFragment;
    "RemoveVault(string)": EventFragment;
    "UpdateRegistrarConfig(tuple)": EventFragment;
    "UpdateRegistrarFees(tuple)": EventFragment;
    "UpdateRegistrarOwner(address)": EventFragment;
    "UpdateVault(string,bool,uint8[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteNetworkConnection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostNetworkConnection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRegistrarConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRegistrarFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRegistrarOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVault"): EventFragment;
}

export interface AddVaultEventObject {
  strategyName: string;
  vault: AngelCoreStruct.YieldVaultStructOutput;
}
export type AddVaultEvent = TypedEvent<
  [string, AngelCoreStruct.YieldVaultStructOutput],
  AddVaultEventObject
>;

export type AddVaultEventFilter = TypedEventFilter<AddVaultEvent>;

export interface DeleteNetworkConnectionEventObject {
  chainId: BigNumber;
}
export type DeleteNetworkConnectionEvent = TypedEvent<
  [BigNumber],
  DeleteNetworkConnectionEventObject
>;

export type DeleteNetworkConnectionEventFilter =
  TypedEventFilter<DeleteNetworkConnectionEvent>;

export interface PostNetworkConnectionEventObject {
  chainId: BigNumber;
  networkInfo: AngelCoreStruct.NetworkInfoStructOutput;
}
export type PostNetworkConnectionEvent = TypedEvent<
  [BigNumber, AngelCoreStruct.NetworkInfoStructOutput],
  PostNetworkConnectionEventObject
>;

export type PostNetworkConnectionEventFilter =
  TypedEventFilter<PostNetworkConnectionEvent>;

export interface RemoveVaultEventObject {
  strategyName: string;
}
export type RemoveVaultEvent = TypedEvent<[string], RemoveVaultEventObject>;

export type RemoveVaultEventFilter = TypedEventFilter<RemoveVaultEvent>;

export interface UpdateRegistrarConfigEventObject {
  details: RegistrarStorage.ConfigStructOutput;
}
export type UpdateRegistrarConfigEvent = TypedEvent<
  [RegistrarStorage.ConfigStructOutput],
  UpdateRegistrarConfigEventObject
>;

export type UpdateRegistrarConfigEventFilter =
  TypedEventFilter<UpdateRegistrarConfigEvent>;

export interface UpdateRegistrarFeesEventObject {
  details: RegistrarMessages.UpdateFeeRequestStructOutput;
}
export type UpdateRegistrarFeesEvent = TypedEvent<
  [RegistrarMessages.UpdateFeeRequestStructOutput],
  UpdateRegistrarFeesEventObject
>;

export type UpdateRegistrarFeesEventFilter =
  TypedEventFilter<UpdateRegistrarFeesEvent>;

export interface UpdateRegistrarOwnerEventObject {
  newOwner: string;
}
export type UpdateRegistrarOwnerEvent = TypedEvent<
  [string],
  UpdateRegistrarOwnerEventObject
>;

export type UpdateRegistrarOwnerEventFilter =
  TypedEventFilter<UpdateRegistrarOwnerEvent>;

export interface UpdateVaultEventObject {
  strategyName: string;
  approved: boolean;
  endowmentTypes: number[];
}
export type UpdateVaultEvent = TypedEvent<
  [string, boolean, number[]],
  UpdateVaultEventObject
>;

export type UpdateVaultEventFilter = TypedEventFilter<UpdateVaultEvent>;

export interface RegistrarEventsLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistrarEventsLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddVault(string,tuple)"(
      strategyName?: null,
      vault?: null
    ): AddVaultEventFilter;
    AddVault(strategyName?: null, vault?: null): AddVaultEventFilter;

    "DeleteNetworkConnection(uint256)"(
      chainId?: null
    ): DeleteNetworkConnectionEventFilter;
    DeleteNetworkConnection(chainId?: null): DeleteNetworkConnectionEventFilter;

    "PostNetworkConnection(uint256,tuple)"(
      chainId?: null,
      networkInfo?: null
    ): PostNetworkConnectionEventFilter;
    PostNetworkConnection(
      chainId?: null,
      networkInfo?: null
    ): PostNetworkConnectionEventFilter;

    "RemoveVault(string)"(strategyName?: null): RemoveVaultEventFilter;
    RemoveVault(strategyName?: null): RemoveVaultEventFilter;

    "UpdateRegistrarConfig(tuple)"(
      details?: null
    ): UpdateRegistrarConfigEventFilter;
    UpdateRegistrarConfig(details?: null): UpdateRegistrarConfigEventFilter;

    "UpdateRegistrarFees(tuple)"(
      details?: null
    ): UpdateRegistrarFeesEventFilter;
    UpdateRegistrarFees(details?: null): UpdateRegistrarFeesEventFilter;

    "UpdateRegistrarOwner(address)"(
      newOwner?: null
    ): UpdateRegistrarOwnerEventFilter;
    UpdateRegistrarOwner(newOwner?: null): UpdateRegistrarOwnerEventFilter;

    "UpdateVault(string,bool,uint8[])"(
      strategyName?: null,
      approved?: null,
      endowmentTypes?: null
    ): UpdateVaultEventFilter;
    UpdateVault(
      strategyName?: null,
      approved?: null,
      endowmentTypes?: null
    ): UpdateVaultEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
