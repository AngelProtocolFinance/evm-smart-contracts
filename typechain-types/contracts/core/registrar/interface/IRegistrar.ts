/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace AngelCoreStruct {
  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };

  export type AcceptedTokensStruct = { cw20: PromiseOrValue<string>[] };

  export type AcceptedTokensStructOutput = [string[]] & { cw20: string[] };

  export type RebalanceDetailsStruct = {
    rebalanceLiquidInvestedProfits: PromiseOrValue<boolean>;
    lockedInterestsToLiquid: PromiseOrValue<boolean>;
    interest_distribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principle_distribution: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceDetailsStructOutput = [
    boolean,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    rebalanceLiquidInvestedProfits: boolean;
    lockedInterestsToLiquid: boolean;
    interest_distribution: BigNumber;
    lockedPrincipleToLiquid: boolean;
    principle_distribution: BigNumber;
  };

  export type NetworkInfoStruct = {
    name: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    router: PromiseOrValue<string>;
    axelerGateway: PromiseOrValue<string>;
    ibcChannel: PromiseOrValue<string>;
    transferChannel: PromiseOrValue<string>;
    gasReceiver: PromiseOrValue<string>;
    gasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NetworkInfoStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    name: string;
    chainId: BigNumber;
    router: string;
    axelerGateway: string;
    ibcChannel: string;
    transferChannel: string;
    gasReceiver: string;
    gasLimit: BigNumber;
  };

  export type YieldVaultStruct = {
    addr: PromiseOrValue<string>;
    network: PromiseOrValue<BigNumberish>;
    inputDenom: PromiseOrValue<string>;
    yieldToken: PromiseOrValue<string>;
    approved: PromiseOrValue<boolean>;
    restrictedFrom: PromiseOrValue<BigNumberish>[];
    acctType: PromiseOrValue<BigNumberish>;
    vaultType: PromiseOrValue<BigNumberish>;
  };

  export type YieldVaultStructOutput = [
    string,
    BigNumber,
    string,
    string,
    boolean,
    number[],
    number,
    number
  ] & {
    addr: string;
    network: BigNumber;
    inputDenom: string;
    yieldToken: string;
    approved: boolean;
    restrictedFrom: number[];
    acctType: number;
    vaultType: number;
  };
}

export declare namespace RegistrarStorage {
  export type ConfigStruct = {
    applicationsReview: PromiseOrValue<string>;
    indexFundContract: PromiseOrValue<string>;
    accountsContract: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    subdaoGovCode: PromiseOrValue<string>;
    subdaoCw20TokenCode: PromiseOrValue<string>;
    subdaoBondingTokenCode: PromiseOrValue<string>;
    subdaoCw900Code: PromiseOrValue<string>;
    subdaoDistributorCode: PromiseOrValue<string>;
    subdaoEmitter: PromiseOrValue<string>;
    donationMatchCode: PromiseOrValue<string>;
    donationMatchCharitesContract: PromiseOrValue<string>;
    donationMatchEmitter: PromiseOrValue<string>;
    splitToLiquid: AngelCoreStruct.SplitDetailsStruct;
    haloToken: PromiseOrValue<string>;
    haloTokenLpContract: PromiseOrValue<string>;
    govContract: PromiseOrValue<string>;
    collectorAddr: PromiseOrValue<string>;
    collectorShare: PromiseOrValue<BigNumberish>;
    charitySharesContract: PromiseOrValue<string>;
    acceptedTokens: AngelCoreStruct.AcceptedTokensStruct;
    fundraisingContract: PromiseOrValue<string>;
    rebalance: AngelCoreStruct.RebalanceDetailsStruct;
    swapsRouter: PromiseOrValue<string>;
    multisigFactory: PromiseOrValue<string>;
    multisigEmitter: PromiseOrValue<string>;
    charityProposal: PromiseOrValue<string>;
    lockedWithdrawal: PromiseOrValue<string>;
    proxyAdmin: PromiseOrValue<string>;
    usdcAddress: PromiseOrValue<string>;
    wethAddress: PromiseOrValue<string>;
    cw900lvAddress: PromiseOrValue<string>;
  };

  export type ConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    AngelCoreStruct.SplitDetailsStructOutput,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    AngelCoreStruct.AcceptedTokensStructOutput,
    string,
    AngelCoreStruct.RebalanceDetailsStructOutput,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    applicationsReview: string;
    indexFundContract: string;
    accountsContract: string;
    treasury: string;
    subdaoGovCode: string;
    subdaoCw20TokenCode: string;
    subdaoBondingTokenCode: string;
    subdaoCw900Code: string;
    subdaoDistributorCode: string;
    subdaoEmitter: string;
    donationMatchCode: string;
    donationMatchCharitesContract: string;
    donationMatchEmitter: string;
    splitToLiquid: AngelCoreStruct.SplitDetailsStructOutput;
    haloToken: string;
    haloTokenLpContract: string;
    govContract: string;
    collectorAddr: string;
    collectorShare: BigNumber;
    charitySharesContract: string;
    acceptedTokens: AngelCoreStruct.AcceptedTokensStructOutput;
    fundraisingContract: string;
    rebalance: AngelCoreStruct.RebalanceDetailsStructOutput;
    swapsRouter: string;
    multisigFactory: string;
    multisigEmitter: string;
    charityProposal: string;
    lockedWithdrawal: string;
    proxyAdmin: string;
    usdcAddress: string;
    wethAddress: string;
    cw900lvAddress: string;
  };
}

export declare namespace RegistrarMessages {
  export type UpdateConfigRequestStruct = {
    accountsContract: PromiseOrValue<string>;
    taxRate: PromiseOrValue<BigNumberish>;
    rebalance: AngelCoreStruct.RebalanceDetailsStruct;
    approved_charities: PromiseOrValue<string>[];
    splitMax: PromiseOrValue<BigNumberish>;
    splitMin: PromiseOrValue<BigNumberish>;
    splitDefault: PromiseOrValue<BigNumberish>;
    collectorShare: PromiseOrValue<BigNumberish>;
    acceptedTokens: AngelCoreStruct.AcceptedTokensStruct;
    subdaoGovCode: PromiseOrValue<string>;
    subdaoCw20TokenCode: PromiseOrValue<string>;
    subdaoBondingTokenCode: PromiseOrValue<string>;
    subdaoCw900Code: PromiseOrValue<string>;
    subdaoDistributorCode: PromiseOrValue<string>;
    subdaoEmitter: PromiseOrValue<string>;
    donationMatchCode: PromiseOrValue<string>;
    indexFundContract: PromiseOrValue<string>;
    govContract: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    donationMatchCharitesContract: PromiseOrValue<string>;
    donationMatchEmitter: PromiseOrValue<string>;
    haloToken: PromiseOrValue<string>;
    haloTokenLpContract: PromiseOrValue<string>;
    charitySharesContract: PromiseOrValue<string>;
    fundraisingContract: PromiseOrValue<string>;
    applicationsReview: PromiseOrValue<string>;
    swapsRouter: PromiseOrValue<string>;
    multisigFactory: PromiseOrValue<string>;
    multisigEmitter: PromiseOrValue<string>;
    charityProposal: PromiseOrValue<string>;
    lockedWithdrawal: PromiseOrValue<string>;
    proxyAdmin: PromiseOrValue<string>;
    usdcAddress: PromiseOrValue<string>;
    wethAddress: PromiseOrValue<string>;
    cw900lvAddress: PromiseOrValue<string>;
  };

  export type UpdateConfigRequestStructOutput = [
    string,
    BigNumber,
    AngelCoreStruct.RebalanceDetailsStructOutput,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    AngelCoreStruct.AcceptedTokensStructOutput,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    accountsContract: string;
    taxRate: BigNumber;
    rebalance: AngelCoreStruct.RebalanceDetailsStructOutput;
    approved_charities: string[];
    splitMax: BigNumber;
    splitMin: BigNumber;
    splitDefault: BigNumber;
    collectorShare: BigNumber;
    acceptedTokens: AngelCoreStruct.AcceptedTokensStructOutput;
    subdaoGovCode: string;
    subdaoCw20TokenCode: string;
    subdaoBondingTokenCode: string;
    subdaoCw900Code: string;
    subdaoDistributorCode: string;
    subdaoEmitter: string;
    donationMatchCode: string;
    indexFundContract: string;
    govContract: string;
    treasury: string;
    donationMatchCharitesContract: string;
    donationMatchEmitter: string;
    haloToken: string;
    haloTokenLpContract: string;
    charitySharesContract: string;
    fundraisingContract: string;
    applicationsReview: string;
    swapsRouter: string;
    multisigFactory: string;
    multisigEmitter: string;
    charityProposal: string;
    lockedWithdrawal: string;
    proxyAdmin: string;
    usdcAddress: string;
    wethAddress: string;
    cw900lvAddress: string;
  };

  export type UpdateFeeRequestStruct = {
    keys: PromiseOrValue<string>[];
    values: PromiseOrValue<BigNumberish>[];
  };

  export type UpdateFeeRequestStructOutput = [string[], BigNumber[]] & {
    keys: string[];
    values: BigNumber[];
  };

  export type VaultAddRequestStruct = {
    network: PromiseOrValue<BigNumberish>;
    stratagyName: PromiseOrValue<string>;
    inputDenom: PromiseOrValue<string>;
    yieldToken: PromiseOrValue<string>;
    restrictedFrom: PromiseOrValue<BigNumberish>[];
    acctType: PromiseOrValue<BigNumberish>;
    vaultType: PromiseOrValue<BigNumberish>;
  };

  export type VaultAddRequestStructOutput = [
    BigNumber,
    string,
    string,
    string,
    number[],
    number,
    number
  ] & {
    network: BigNumber;
    stratagyName: string;
    inputDenom: string;
    yieldToken: string;
    restrictedFrom: number[];
    acctType: number;
    vaultType: number;
  };
}

export interface IRegistrarInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryFee(string)": FunctionFragment;
    "queryNetworkConnection(uint256)": FunctionFragment;
    "queryVaultDetails(string)": FunctionFragment;
    "queryVaultList(uint256,uint8,uint8,uint8,uint8,uint256,uint256)": FunctionFragment;
    "queryVaultListDep(uint256,uint8,uint8,uint8,uint8,uint256,uint256)": FunctionFragment;
    "testQuery()": FunctionFragment;
    "testQueryStruct()": FunctionFragment;
    "updateConfig((address,uint256,(bool,bool,uint256,bool,uint256),string[],uint256,uint256,uint256,uint256,(address[]),address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address))": FunctionFragment;
    "updateFees((string[],uint256[]))": FunctionFragment;
    "updateNetworkConnections((string,uint256,address,address,string,string,address,uint256),string)": FunctionFragment;
    "updateOwner(address)": FunctionFragment;
    "vaultAdd((uint256,string,address,address,uint8[],uint8,uint8))": FunctionFragment;
    "vaultRemove(string)": FunctionFragment;
    "vaultUpdate(string,bool,uint8[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owner"
      | "queryConfig"
      | "queryFee"
      | "queryNetworkConnection"
      | "queryVaultDetails"
      | "queryVaultList"
      | "queryVaultListDep"
      | "testQuery"
      | "testQueryStruct"
      | "updateConfig"
      | "updateFees"
      | "updateNetworkConnections"
      | "updateOwner"
      | "vaultAdd"
      | "vaultRemove"
      | "vaultUpdate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryNetworkConnection",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryVaultDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryVaultList",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryVaultListDep",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "testQuery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testQueryStruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [RegistrarMessages.UpdateConfigRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [RegistrarMessages.UpdateFeeRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkConnections",
    values: [AngelCoreStruct.NetworkInfoStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAdd",
    values: [RegistrarMessages.VaultAddRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRemove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultUpdate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryNetworkConnection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVaultDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVaultList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVaultListDep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testQuery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testQueryStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkConnections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultUpdate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[RegistrarStorage.ConfigStructOutput]>;

    queryFee(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { response: BigNumber }>;

    queryNetworkConnection(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [AngelCoreStruct.NetworkInfoStructOutput] & {
        response: AngelCoreStruct.NetworkInfoStructOutput;
      }
    >;

    queryVaultDetails(
      _stratagyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [AngelCoreStruct.YieldVaultStructOutput] & {
        response: AngelCoreStruct.YieldVaultStructOutput;
      }
    >;

    queryVaultList(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.YieldVaultStructOutput[]]>;

    queryVaultListDep(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.YieldVaultStructOutput[]]>;

    testQuery(overrides?: CallOverrides): Promise<[string[]]>;

    testQueryStruct(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.YieldVaultStructOutput[]]>;

    updateConfig(
      curDetails: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFees(
      curDetails: RegistrarMessages.UpdateFeeRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNetworkConnections(
      networkInfo: AngelCoreStruct.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultAdd(
      curDetails: RegistrarMessages.VaultAddRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultRemove(
      _stratagyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultUpdate(
      _stratagyName: PromiseOrValue<string>,
      curApproved: PromiseOrValue<boolean>,
      curRestrictedfrom: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<RegistrarStorage.ConfigStructOutput>;

  queryFee(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryNetworkConnection(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.NetworkInfoStructOutput>;

  queryVaultDetails(
    _stratagyName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.YieldVaultStructOutput>;

  queryVaultList(
    network: PromiseOrValue<BigNumberish>,
    endowmentType: PromiseOrValue<BigNumberish>,
    accountType: PromiseOrValue<BigNumberish>,
    vaultType: PromiseOrValue<BigNumberish>,
    approved: PromiseOrValue<BigNumberish>,
    startAfter: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.YieldVaultStructOutput[]>;

  queryVaultListDep(
    network: PromiseOrValue<BigNumberish>,
    endowmentType: PromiseOrValue<BigNumberish>,
    accountType: PromiseOrValue<BigNumberish>,
    vaultType: PromiseOrValue<BigNumberish>,
    approved: PromiseOrValue<BigNumberish>,
    startAfter: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.YieldVaultStructOutput[]>;

  testQuery(overrides?: CallOverrides): Promise<string[]>;

  testQueryStruct(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.YieldVaultStructOutput[]>;

  updateConfig(
    curDetails: RegistrarMessages.UpdateConfigRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFees(
    curDetails: RegistrarMessages.UpdateFeeRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNetworkConnections(
    networkInfo: AngelCoreStruct.NetworkInfoStruct,
    action: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultAdd(
    curDetails: RegistrarMessages.VaultAddRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultRemove(
    _stratagyName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultUpdate(
    _stratagyName: PromiseOrValue<string>,
    curApproved: PromiseOrValue<boolean>,
    curRestrictedfrom: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<RegistrarStorage.ConfigStructOutput>;

    queryFee(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryNetworkConnection(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.NetworkInfoStructOutput>;

    queryVaultDetails(
      _stratagyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.YieldVaultStructOutput>;

    queryVaultList(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.YieldVaultStructOutput[]>;

    queryVaultListDep(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.YieldVaultStructOutput[]>;

    testQuery(overrides?: CallOverrides): Promise<string[]>;

    testQueryStruct(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.YieldVaultStructOutput[]>;

    updateConfig(
      curDetails: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFees(
      curDetails: RegistrarMessages.UpdateFeeRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkConnections(
      networkInfo: AngelCoreStruct.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultAdd(
      curDetails: RegistrarMessages.VaultAddRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultRemove(
      _stratagyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultUpdate(
      _stratagyName: PromiseOrValue<string>,
      curApproved: PromiseOrValue<boolean>,
      curRestrictedfrom: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    queryFee(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryNetworkConnection(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryVaultDetails(
      _stratagyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryVaultList(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryVaultListDep(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testQuery(overrides?: CallOverrides): Promise<BigNumber>;

    testQueryStruct(overrides?: CallOverrides): Promise<BigNumber>;

    updateConfig(
      curDetails: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFees(
      curDetails: RegistrarMessages.UpdateFeeRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNetworkConnections(
      networkInfo: AngelCoreStruct.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultAdd(
      curDetails: RegistrarMessages.VaultAddRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultRemove(
      _stratagyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultUpdate(
      _stratagyName: PromiseOrValue<string>,
      curApproved: PromiseOrValue<boolean>,
      curRestrictedfrom: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryFee(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryNetworkConnection(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryVaultDetails(
      _stratagyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryVaultList(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryVaultListDep(
      network: PromiseOrValue<BigNumberish>,
      endowmentType: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      vaultType: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<BigNumberish>,
      startAfter: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testQuery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testQueryStruct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateConfig(
      curDetails: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFees(
      curDetails: RegistrarMessages.UpdateFeeRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNetworkConnections(
      networkInfo: AngelCoreStruct.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultAdd(
      curDetails: RegistrarMessages.VaultAddRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultRemove(
      _stratagyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultUpdate(
      _stratagyName: PromiseOrValue<string>,
      curApproved: PromiseOrValue<boolean>,
      curRestrictedfrom: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
