/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AngelCoreStruct {
  export type AccountStrategiesStruct = {
    locked_vault: PromiseOrValue<string>[];
    lockedPercentage: PromiseOrValue<BigNumberish>[];
    liquid_vault: PromiseOrValue<string>[];
    liquidPercentage: PromiseOrValue<BigNumberish>[];
  };

  export type AccountStrategiesStructOutput = [
    string[],
    BigNumber[],
    string[],
    BigNumber[]
  ] & {
    locked_vault: string[];
    lockedPercentage: BigNumber[];
    liquid_vault: string[];
    liquidPercentage: BigNumber[];
  };

  export type GenericBalanceStruct = {
    coinNativeAmount: PromiseOrValue<BigNumberish>;
    Cw20CoinVerified_amount: PromiseOrValue<BigNumberish>[];
    Cw20CoinVerified_addr: PromiseOrValue<string>[];
  };

  export type GenericBalanceStructOutput = [
    BigNumber,
    BigNumber[],
    string[]
  ] & {
    coinNativeAmount: BigNumber;
    Cw20CoinVerified_amount: BigNumber[];
    Cw20CoinVerified_addr: string[];
  };

  export type BeneficiaryDataStruct = {
    id: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
  };

  export type BeneficiaryDataStructOutput = [BigNumber, string] & {
    id: BigNumber;
    addr: string;
  };

  export type BeneficiaryStruct = {
    data: AngelCoreStruct.BeneficiaryDataStruct;
    enumData: PromiseOrValue<BigNumberish>;
  };

  export type BeneficiaryStructOutput = [
    AngelCoreStruct.BeneficiaryDataStructOutput,
    number
  ] & { data: AngelCoreStruct.BeneficiaryDataStructOutput; enumData: number };

  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };

  export type DonationsReceivedStruct = {
    locked: PromiseOrValue<BigNumberish>;
    liquid: PromiseOrValue<BigNumberish>;
  };

  export type DonationsReceivedStructOutput = [BigNumber, BigNumber] & {
    locked: BigNumber;
    liquid: BigNumber;
  };

  export type OneOffVaultsStruct = {
    locked: PromiseOrValue<string>[];
    lockedAmount: PromiseOrValue<BigNumberish>[];
    liquid: PromiseOrValue<string>[];
    liquidAmount: PromiseOrValue<BigNumberish>[];
  };

  export type OneOffVaultsStructOutput = [
    string[],
    BigNumber[],
    string[],
    BigNumber[]
  ] & {
    locked: string[];
    lockedAmount: BigNumber[];
    liquid: string[];
    liquidAmount: BigNumber[];
  };

  export type RebalanceDetailsStruct = {
    rebalanceLiquidInvestedProfits: PromiseOrValue<boolean>;
    lockedInterestsToLiquid: PromiseOrValue<boolean>;
    interest_distribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principle_distribution: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceDetailsStructOutput = [
    boolean,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    rebalanceLiquidInvestedProfits: boolean;
    lockedInterestsToLiquid: boolean;
    interest_distribution: BigNumber;
    lockedPrincipleToLiquid: boolean;
    principle_distribution: BigNumber;
  };
}

export interface AngelCoreStructInterface extends utils.Interface {
  functions: {
    "accountStrategiesDefaut()": FunctionFragment;
    "addTokenMem((uint256,uint256[],address[]),address,uint256)": FunctionFragment;
    "beneficiaryDefault()": FunctionFragment;
    "checkSplits((uint256,uint256,uint256),uint256,uint256,bool)": FunctionFragment;
    "cw20Valid(address[],address)": FunctionFragment;
    "deductTokens(address[],uint256[],address,uint256)": FunctionFragment;
    "donationsReceivedDefault()": FunctionFragment;
    "genericBalanceDefault()": FunctionFragment;
    "getTokenAmount(address[],uint256[],address)": FunctionFragment;
    "oneOffVaultsDefault()": FunctionFragment;
    "rebalanceDetailsDefaut()": FunctionFragment;
    "subTokenMem((uint256,uint256[],address[]),address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountStrategiesDefaut"
      | "addTokenMem"
      | "beneficiaryDefault"
      | "checkSplits"
      | "cw20Valid"
      | "deductTokens"
      | "donationsReceivedDefault"
      | "genericBalanceDefault"
      | "getTokenAmount"
      | "oneOffVaultsDefault"
      | "rebalanceDetailsDefaut"
      | "subTokenMem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountStrategiesDefaut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenMem",
    values: [
      AngelCoreStruct.GenericBalanceStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSplits",
    values: [
      AngelCoreStruct.SplitDetailsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cw20Valid",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deductTokens",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donationsReceivedDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genericBalanceDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmount",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oneOffVaultsDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceDetailsDefaut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subTokenMem",
    values: [
      AngelCoreStruct.GenericBalanceStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountStrategiesDefaut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenMem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cw20Valid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deductTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationsReceivedDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericBalanceDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneOffVaultsDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceDetailsDefaut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subTokenMem",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AngelCoreStruct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AngelCoreStructInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountStrategiesDefaut(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.AccountStrategiesStructOutput]>;

    addTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.GenericBalanceStructOutput]>;

    beneficiaryDefault(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.BeneficiaryStructOutput]>;

    checkSplits(
      registrarSplits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    cw20Valid(
      cw20: PromiseOrValue<string>[],
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deductTokens(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curDeducttokenfor: PromiseOrValue<string>,
      curDeductamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    donationsReceivedDefault(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.DonationsReceivedStructOutput]>;

    genericBalanceDefault(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.GenericBalanceStructOutput]>;

    getTokenAmount(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curTokenaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oneOffVaultsDefault(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.OneOffVaultsStructOutput]>;

    rebalanceDetailsDefaut(
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.RebalanceDetailsStructOutput]>;

    subTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.GenericBalanceStructOutput]>;
  };

  accountStrategiesDefaut(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.AccountStrategiesStructOutput>;

  addTokenMem(
    curTemp: AngelCoreStruct.GenericBalanceStruct,
    curTokenaddress: PromiseOrValue<string>,
    curAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

  beneficiaryDefault(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.BeneficiaryStructOutput>;

  checkSplits(
    registrarSplits: AngelCoreStruct.SplitDetailsStruct,
    userLocked: PromiseOrValue<BigNumberish>,
    userLiquid: PromiseOrValue<BigNumberish>,
    userOverride: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  cw20Valid(
    cw20: PromiseOrValue<string>[],
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deductTokens(
    curAddress: PromiseOrValue<string>[],
    curAmount: PromiseOrValue<BigNumberish>[],
    curDeducttokenfor: PromiseOrValue<string>,
    curDeductamount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  donationsReceivedDefault(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.DonationsReceivedStructOutput>;

  genericBalanceDefault(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

  getTokenAmount(
    curAddress: PromiseOrValue<string>[],
    curAmount: PromiseOrValue<BigNumberish>[],
    curTokenaddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oneOffVaultsDefault(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.OneOffVaultsStructOutput>;

  rebalanceDetailsDefaut(
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.RebalanceDetailsStructOutput>;

  subTokenMem(
    curTemp: AngelCoreStruct.GenericBalanceStruct,
    curTokenaddress: PromiseOrValue<string>,
    curAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

  callStatic: {
    accountStrategiesDefaut(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.AccountStrategiesStructOutput>;

    addTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

    beneficiaryDefault(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.BeneficiaryStructOutput>;

    checkSplits(
      registrarSplits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    cw20Valid(
      cw20: PromiseOrValue<string>[],
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deductTokens(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curDeducttokenfor: PromiseOrValue<string>,
      curDeductamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    donationsReceivedDefault(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.DonationsReceivedStructOutput>;

    genericBalanceDefault(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

    getTokenAmount(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curTokenaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneOffVaultsDefault(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.OneOffVaultsStructOutput>;

    rebalanceDetailsDefaut(
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.RebalanceDetailsStructOutput>;

    subTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;
  };

  filters: {};

  estimateGas: {
    accountStrategiesDefaut(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryDefault(overrides?: CallOverrides): Promise<BigNumber>;

    checkSplits(
      registrarSplits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cw20Valid(
      cw20: PromiseOrValue<string>[],
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deductTokens(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curDeducttokenfor: PromiseOrValue<string>,
      curDeductamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donationsReceivedDefault(overrides?: CallOverrides): Promise<BigNumber>;

    genericBalanceDefault(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAmount(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curTokenaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneOffVaultsDefault(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceDetailsDefaut(overrides?: CallOverrides): Promise<BigNumber>;

    subTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountStrategiesDefaut(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryDefault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSplits(
      registrarSplits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cw20Valid(
      cw20: PromiseOrValue<string>[],
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deductTokens(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curDeducttokenfor: PromiseOrValue<string>,
      curDeductamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationsReceivedDefault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genericBalanceDefault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmount(
      curAddress: PromiseOrValue<string>[],
      curAmount: PromiseOrValue<BigNumberish>[],
      curTokenaddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneOffVaultsDefault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceDetailsDefaut(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subTokenMem(
      curTemp: AngelCoreStruct.GenericBalanceStruct,
      curTokenaddress: PromiseOrValue<string>,
      curAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
