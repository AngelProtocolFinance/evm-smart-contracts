/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AngelCoreStruct {
  export type GenericBalanceStruct = {
    coinNativeAmount: PromiseOrValue<BigNumberish>;
    Cw20CoinVerified_amount: PromiseOrValue<BigNumberish>[];
    Cw20CoinVerified_addr: PromiseOrValue<string>[];
  };

  export type GenericBalanceStructOutput = [
    BigNumber,
    BigNumber[],
    string[]
  ] & {
    coinNativeAmount: BigNumber;
    Cw20CoinVerified_amount: BigNumber[];
    Cw20CoinVerified_addr: string[];
  };

  export type AssetBaseStruct = {
    info: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
  };

  export type AssetBaseStructOutput = [number, BigNumber, string, string] & {
    info: number;
    amount: BigNumber;
    addr: string;
    name: string;
  };
}

export declare namespace GiftCardsStorage {
  export type ConfigStruct = {
    owner: PromiseOrValue<string>;
    registrarContract: PromiseOrValue<string>;
    keeper: PromiseOrValue<string>;
    nextDeposit: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [string, string, string, BigNumber] & {
    owner: string;
    registrarContract: string;
    keeper: string;
    nextDeposit: BigNumber;
  };

  export type DepositStruct = {
    sender: PromiseOrValue<string>;
    token: AngelCoreStruct.AssetBaseStruct;
    claimed: PromiseOrValue<boolean>;
  };

  export type DepositStructOutput = [
    string,
    AngelCoreStruct.AssetBaseStructOutput,
    boolean
  ] & {
    sender: string;
    token: AngelCoreStruct.AssetBaseStructOutput;
    claimed: boolean;
  };
}

export declare namespace GiftCardsMessage {
  export type InstantiateMsgStruct = {
    keeper: PromiseOrValue<string>;
    registrarContract: PromiseOrValue<string>;
  };

  export type InstantiateMsgStructOutput = [string, string] & {
    keeper: string;
    registrarContract: string;
  };
}

export interface GiftCardsInterface extends utils.Interface {
  functions: {
    "executeClaim(uint256,address)": FunctionFragment;
    "executeDeposit(address,address)": FunctionFragment;
    "executeDepositERC20(address,address,(uint8,uint256,address,string))": FunctionFragment;
    "executeSpend((uint8,uint256,address,string),uint256,uint256,uint256)": FunctionFragment;
    "initialize((address,address))": FunctionFragment;
    "queryBalance(address)": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryDeposit(uint256)": FunctionFragment;
    "updateConfig(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeClaim"
      | "executeDeposit"
      | "executeDepositERC20"
      | "executeSpend"
      | "initialize"
      | "queryBalance"
      | "queryConfig"
      | "queryDeposit"
      | "updateConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeClaim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDepositERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      AngelCoreStruct.AssetBaseStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSpend",
    values: [
      AngelCoreStruct.AssetBaseStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [GiftCardsMessage.InstantiateMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "queryBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;

  events: {
    "GiftCardsUpdateBalances(address,tuple)": EventFragment;
    "GiftCardsUpdateConfig(tuple)": EventFragment;
    "GiftCardsUpdateDeposit(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GiftCardsUpdateBalances"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiftCardsUpdateConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiftCardsUpdateDeposit"): EventFragment;
}

export interface GiftCardsUpdateBalancesEventObject {
  addr: string;
  balance: AngelCoreStruct.GenericBalanceStructOutput;
}
export type GiftCardsUpdateBalancesEvent = TypedEvent<
  [string, AngelCoreStruct.GenericBalanceStructOutput],
  GiftCardsUpdateBalancesEventObject
>;

export type GiftCardsUpdateBalancesEventFilter =
  TypedEventFilter<GiftCardsUpdateBalancesEvent>;

export interface GiftCardsUpdateConfigEventObject {
  config: GiftCardsStorage.ConfigStructOutput;
}
export type GiftCardsUpdateConfigEvent = TypedEvent<
  [GiftCardsStorage.ConfigStructOutput],
  GiftCardsUpdateConfigEventObject
>;

export type GiftCardsUpdateConfigEventFilter =
  TypedEventFilter<GiftCardsUpdateConfigEvent>;

export interface GiftCardsUpdateDepositEventObject {
  depositId: BigNumber;
  deposit: GiftCardsStorage.DepositStructOutput;
}
export type GiftCardsUpdateDepositEvent = TypedEvent<
  [BigNumber, GiftCardsStorage.DepositStructOutput],
  GiftCardsUpdateDepositEventObject
>;

export type GiftCardsUpdateDepositEventFilter =
  TypedEventFilter<GiftCardsUpdateDepositEvent>;

export interface GiftCards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GiftCardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeClaim(
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDeposit(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDepositERC20(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      fund: AngelCoreStruct.AssetBaseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeSpend(
      fund: AngelCoreStruct.AssetBaseStruct,
      endowmentId: PromiseOrValue<BigNumberish>,
      lockedPercentage: PromiseOrValue<BigNumberish>,
      liquidPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      curDetails: GiftCardsMessage.InstantiateMsgStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AngelCoreStruct.GenericBalanceStructOutput]>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[GiftCardsStorage.ConfigStructOutput]>;

    queryDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GiftCardsStorage.DepositStructOutput]>;

    updateConfig(
      owner: PromiseOrValue<string>,
      keeper: PromiseOrValue<string>,
      registrarContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeClaim(
    depositId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDeposit(
    sender: PromiseOrValue<string>,
    toAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDepositERC20(
    sender: PromiseOrValue<string>,
    toAddress: PromiseOrValue<string>,
    fund: AngelCoreStruct.AssetBaseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeSpend(
    fund: AngelCoreStruct.AssetBaseStruct,
    endowmentId: PromiseOrValue<BigNumberish>,
    lockedPercentage: PromiseOrValue<BigNumberish>,
    liquidPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    curDetails: GiftCardsMessage.InstantiateMsgStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryBalance(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<GiftCardsStorage.ConfigStructOutput>;

  queryDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GiftCardsStorage.DepositStructOutput>;

  updateConfig(
    owner: PromiseOrValue<string>,
    keeper: PromiseOrValue<string>,
    registrarContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeClaim(
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDeposit(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDepositERC20(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      fund: AngelCoreStruct.AssetBaseStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSpend(
      fund: AngelCoreStruct.AssetBaseStruct,
      endowmentId: PromiseOrValue<BigNumberish>,
      lockedPercentage: PromiseOrValue<BigNumberish>,
      liquidPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      curDetails: GiftCardsMessage.InstantiateMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    queryBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AngelCoreStruct.GenericBalanceStructOutput>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<GiftCardsStorage.ConfigStructOutput>;

    queryDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GiftCardsStorage.DepositStructOutput>;

    updateConfig(
      owner: PromiseOrValue<string>,
      keeper: PromiseOrValue<string>,
      registrarContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GiftCardsUpdateBalances(address,tuple)"(
      addr?: null,
      balance?: null
    ): GiftCardsUpdateBalancesEventFilter;
    GiftCardsUpdateBalances(
      addr?: null,
      balance?: null
    ): GiftCardsUpdateBalancesEventFilter;

    "GiftCardsUpdateConfig(tuple)"(
      config?: null
    ): GiftCardsUpdateConfigEventFilter;
    GiftCardsUpdateConfig(config?: null): GiftCardsUpdateConfigEventFilter;

    "GiftCardsUpdateDeposit(uint256,tuple)"(
      depositId?: null,
      deposit?: null
    ): GiftCardsUpdateDepositEventFilter;
    GiftCardsUpdateDeposit(
      depositId?: null,
      deposit?: null
    ): GiftCardsUpdateDepositEventFilter;
  };

  estimateGas: {
    executeClaim(
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDeposit(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDepositERC20(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      fund: AngelCoreStruct.AssetBaseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeSpend(
      fund: AngelCoreStruct.AssetBaseStruct,
      endowmentId: PromiseOrValue<BigNumberish>,
      lockedPercentage: PromiseOrValue<BigNumberish>,
      liquidPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      curDetails: GiftCardsMessage.InstantiateMsgStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    queryDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateConfig(
      owner: PromiseOrValue<string>,
      keeper: PromiseOrValue<string>,
      registrarContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeClaim(
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDeposit(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDepositERC20(
      sender: PromiseOrValue<string>,
      toAddress: PromiseOrValue<string>,
      fund: AngelCoreStruct.AssetBaseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeSpend(
      fund: AngelCoreStruct.AssetBaseStruct,
      endowmentId: PromiseOrValue<BigNumberish>,
      lockedPercentage: PromiseOrValue<BigNumberish>,
      liquidPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      curDetails: GiftCardsMessage.InstantiateMsgStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConfig(
      owner: PromiseOrValue<string>,
      keeper: PromiseOrValue<string>,
      registrarContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
